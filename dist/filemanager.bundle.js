/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Filemanager"] = factory();
	else
		root["Filemanager"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/filemanager.js":
/*!****************************!*\
  !*** ./src/filemanager.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileManager: () => (/* binding */ FileManager),\n/* harmony export */   FileManagerServer: () => (/* binding */ FileManagerServer),\n/* harmony export */   FileManagerStyles: () => (/* binding */ FileManagerStyles)\n/* harmony export */ });\n\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass FileManagerStyles {\r\n    constructor() {\r\n        this.updatableElements = {};\r\n        this.fileManagerMutableStyles = {\r\n            \"colors\": {\r\n                hover: \"#3e3e3e\",\r\n                border: \"#2B2B2B\",\r\n                main_background: \"#252526\",\r\n                selected: \"#4a4a4a\",\r\n                text_color: \"#ffffff\"\r\n            },\r\n            \"sizing\": {\r\n                tools: \"medium\",\r\n                navigation: \"medium\",\r\n                folders_panel: \"medium\",\r\n                files_panel: \"medium\",\r\n            }\r\n        };\r\n        this.fileManagerHeaderStyles = {};\r\n        this.fileManagerStyles = {};\r\n        this.setDefaultMutableStyles();\r\n        if (localStorage.fmMutableStyles) {\r\n            this.updateMutableStyles();\r\n        }\r\n        else {\r\n            let defaultStyles = this.getDefaultMutableStyles();\r\n            this.setMutableStyles(defaultStyles);\r\n            this.updateMutableStyles();\r\n        }\r\n        this.updateFileManagerStyles();\r\n        this.updateFileManagerHeaderStyles();\r\n        this.headerStyleElement = document.createElement('style');\r\n        document.head.appendChild(this.headerStyleElement);\r\n    }\r\n    updateFileManagerStyles() {\r\n        this.fileManagerStyles = {\r\n            \"fm_super_root\": {\r\n                \"box-sizing\": 'border-box',\r\n                fontFamily: '\"Roboto\", sans-serif',\r\n                width: '100%',\r\n                height: \"100%\",\r\n                \"min-height\": \"300px\",\r\n                \"min-width\": \"550px\",\r\n                display: \"flex\",\r\n                \"flex-direction\": \"column\",\r\n            },\r\n            \"fm_folders_nav\": {\r\n                width: '220px',\r\n                border: this.settingSizing([3], \"folders_panel\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"border-radius\": '4px',\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                color: '#e3e3e3',\r\n                overflowX: 'scroll',\r\n                height: '100%',\r\n                scrollbarWidth: 'thin',\r\n                scrollbarColor: `#888 ${this.fileManagerMutableStyles.colors.border}`,\r\n                display: \"flex\",\r\n                \"box-sizing\": \"border-box\",\r\n                resize: \"horizontal\",\r\n            },\r\n            \"fm_folder_icon\": {\r\n                width: this.settingSizing([22], \"folders_panel\"),\r\n                marginRight: this.settingSizing([8], \"folders_panel\"),\r\n            },\r\n            \"fm_folder_name\": {\r\n                fontSize: this.settingSizing([14], \"folders_panel\"),\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                \"text-overflow\": \"ellipsis\",\r\n                \"width\": \"90%\",\r\n                \"white-space\": \"nowrap\",\r\n            },\r\n            \"fm_folder\": {\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: '8px',\r\n                cursor: 'pointer',\r\n                marginLeft: '24px',\r\n            },\r\n            \"fm_folder_parent\": {\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n                width: '100%',\r\n                \"overflow\": \"hidden\",\r\n            },\r\n            \"fm_folder_open_icon_wrapper\": {\r\n                paddingLeft: this.settingSizing([4], \"folders_panel\"),\r\n                paddingRight: this.settingSizing([8], \"folders_panel\"),\r\n            },\r\n            \"fm_folder_parent__opened\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.selected,\r\n            },\r\n            \"fm_openedFile\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.selected,\r\n            },\r\n            \"fm_folder_open_icon\": {\r\n                width: this.settingSizing([10], \"folders_panel\"),\r\n            },\r\n            \"fm_folder_wrapper\": {\r\n                position: 'relative',\r\n                left: this.settingSizing([24], \"folders_panel\"),\r\n                userSelect: 'none',\r\n                \"box-sizing\": \"border-box\",\r\n                \"min-width\": '100%',\r\n                display: \"table\"\r\n            },\r\n            \"fm_folder_root_wrapper\": {\r\n                position: 'static',\r\n            },\r\n            \"fm_files_panel\": {\r\n                border: this.settingSizing([3], \"files_panel\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                color: '#e3e3e3',\r\n                width: '80%',\r\n                \"border-radius\": '4px',\r\n                overflowY: 'auto',\r\n                height: '100%',\r\n            },\r\n            \"fm_filemanager_main\": {\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                gap: '8px',\r\n                padding: '16px',\r\n                paddingTop: '8px',\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                \"border-radius\": '0px 0px 4px 4px',\r\n                height: \"85%\",\r\n                \"box-sizing\": \"border-box\",\r\n                resize: \"horizontal\"\r\n            },\r\n            \"fm_metadata_block\": {\r\n                flexDirection: 'row',\r\n                borderBottom: this.settingSizing([3], \"files_panel\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                padding: this.settingSizing([8], \"files_panel\"),\r\n                fontSize: this.settingSizing([12], \"files_panel\"),\r\n                paddingLeft: this.settingSizing([12], \"files_panel\"),\r\n            },\r\n            \"fm_metadata\": {\r\n                userSelect: 'none',\r\n            },\r\n            \"fm_metadata_name\": {\r\n                width: '37%',\r\n            },\r\n            \"fm_metadata_changedate\": {\r\n                width: '34%',\r\n            },\r\n            \"fm_file_changedate\": {\r\n                width: '32%',\r\n            },\r\n            \"fm_metadata_type\": {\r\n                width: '14%',\r\n            },\r\n            \"fm_metadata_size\": {\r\n                width: '14%',\r\n            },\r\n            \"fm_file_type\": {\r\n                width: '14%',\r\n            },\r\n            \"fm_file_size\": {\r\n                width: '14%',\r\n            },\r\n            \"fm_files_list\": {\r\n                padding: '8px 0px',\r\n            },\r\n            \"fm_file_metadata\": {\r\n                // overflow: 'hidden',\r\n                userSelect: 'none',\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                \"margin-right\": '2%',\r\n                \"font-size\": this.settingSizing([16], \"files_panel\"),\r\n                \"white-space\": \"nowrap\",\r\n                \"text-overflow\": \"ellipsis\",\r\n                \"overflow\": \"hidden\"\r\n            },\r\n            \"fm_file_block\": {\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                borderBottom: this.settingSizing([2], \"files_panel\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                padding: this.settingSizing([8, 0], \"files_panel\"),\r\n                paddingLeft: this.settingSizing([12], \"files_panel\"),\r\n                cursor: 'pointer',\r\n            },\r\n            \"fm_file_icon\": {\r\n                width: this.settingSizing([22], \"files_panel\"),\r\n                marginRight: '2%',\r\n                userSelect: 'none',\r\n            },\r\n            \"fm_file_name\": {\r\n                width: '31%',\r\n                overflow: 'hidden',\r\n                \"box-sizing\": \"border-box\",\r\n                \"white-space\": \"nowrap\",\r\n            },\r\n            \"fm_filemanager_tools\": {\r\n                border: `3px solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                borderTop: 'none',\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                padding: '0px 16px',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                \"box-sizing\": 'border-box',\r\n            },\r\n            \"fm_filemanager_navigation\": {\r\n                border: `3px solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                \"border-radius\": '4px 4px 0px 0px',\r\n                padding: '8px 16px',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n            },\r\n            \"fm_filemanager_arrow\": {\r\n                width: this.settingSizing([16], \"navigation\"),\r\n                display: 'block',\r\n                userSelect: 'none',\r\n            },\r\n            \"fm_arrows_block\": {\r\n                border: this.settingSizing([3], 'navigation') + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                display: 'flex',\r\n                \"border-radius\": '4px',\r\n            },\r\n            \"fm_arrow_wrapper\": {\r\n                padding: this.settingSizing([8, 12], \"navigation\"),\r\n                \"border-radius\": '4px',\r\n                cursor: 'pointer',\r\n            },\r\n            \"fm_add_file_button\": {\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                border: this.settingSizing([3], 'tools') + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                borderTop: 'none',\r\n                borderBottom: 'none',\r\n                padding: this.settingSizing([8, 12], 'tools'),\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: this.settingSizing([8], 'tools'),\r\n                cursor: 'pointer',\r\n                fontSize: this.settingSizing([13], 'tools'),\r\n                fontWeight: '500',\r\n                height: '100%',\r\n                \"user-select\": \"none\"\r\n            },\r\n            \"fm_add_file_icon\": {\r\n                width: this.settingSizing([24], 'tools'),\r\n            },\r\n            \"fm_tool\": {\r\n                width: this.settingSizing([35], 'tools'),\r\n                height: this.settingSizing([35], 'tools'),\r\n                padding: this.settingSizing([8], 'tools'),\r\n                margin: this.settingSizing([0, 8], 'tools'),\r\n                cursor: 'pointer',\r\n                display: 'block',\r\n                userSelect: 'none',\r\n                \"box-sizing\": 'border-box'\r\n            },\r\n            \"fm_current_path\": {\r\n                border: `3px solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"border-radius\": '4px',\r\n                width: '60%',\r\n                marginLeft: '16px',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                gap: '8px',\r\n                padding: '0px 12px',\r\n                marginRight: '8px',\r\n                \"overflow\": \"hidden\",\r\n                \"white-space\": \"nowrap\",\r\n            },\r\n            \"fm_path_arrow\": {\r\n                width: '12px',\r\n            },\r\n            \"fm_path_folder\": {\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                userSelect: 'none',\r\n                \"font-size\": this.settingSizing([16], \"navigation\"),\r\n            },\r\n            \"fm_search\": {\r\n                border: `3px solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"border-radius\": '4px',\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                padding: '0px 8px',\r\n                color: '#ffff',\r\n                width: '20%',\r\n                \"font-size\": this.settingSizing([14], \"navigation\"),\r\n            },\r\n            \"fm_grid_wrapper\": {\r\n                display: 'flex',\r\n                width: '100%',\r\n                justifyContent: 'flex-end',\r\n            },\r\n            \"fm_disabled\": {\r\n                opacity: '0.5',\r\n            },\r\n            \"fm_upload_files_block\": {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n                width: this.settingSizing([143], \"tools\"),\r\n                border: this.settingSizing([3], \"tools\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                borderTop: 'none',\r\n                position: 'absolute',\r\n                bottom: this.settingSizing([-84], \"tools\"),\r\n                zIndex: '10',\r\n                cursor: 'pointer',\r\n                \"box-sizing\": 'border-box',\r\n            },\r\n            \"fm_upload_files_func_wrapper\": {\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                padding: this.settingSizing([8], \"tools\"),\r\n                gap: this.settingSizing([8], \"tools\"),\r\n                alignItems: 'center',\r\n                width: '100%',\r\n                userSelect: 'none',\r\n                \"box-sizing\": 'border-box',\r\n                position: 'relative',\r\n            },\r\n            \"fm_upload_files_func_icon\": {\r\n                width: this.settingSizing([24], \"tools\"),\r\n            },\r\n            \"fm_upload_files_func_name\": {\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                fontSize: this.settingSizing([13], \"tools\"),\r\n                fontWeight: '500',\r\n            },\r\n            \"fm_hidden\": {\r\n                display: 'none',\r\n            },\r\n            \"fm_upload_files_func_input\": {\r\n                position: 'absolute',\r\n                width: '100%',\r\n                height: '100%',\r\n                top: '0px',\r\n                left: '0px',\r\n                opacity: '0',\r\n            },\r\n            \"fm_upload_file_func_input\": {\r\n                position: 'absolute',\r\n                width: '100%',\r\n                height: '100%',\r\n                top: '0px',\r\n                left: '0px',\r\n                opacity: '0',\r\n            },\r\n            \"fm_tool_active\": {\r\n                opacity: '0.6',\r\n            },\r\n            \"fm_settings_panel\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.main_background,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                padding: \"4%\",\r\n                \"box-sizing\": \"border-box\",\r\n                \"border-radius\": \"4px\"\r\n            },\r\n            \"fm_leave_settings_arrow\": {\r\n                width: \"35px\",\r\n                height: \"35px\",\r\n                padding: \"8px\",\r\n                cursor: 'pointer',\r\n                display: 'block',\r\n                userSelect: 'none',\r\n                \"box-sizing\": 'border-box'\r\n            },\r\n            \"fm_params_panel\": {\r\n                display: \"flex\",\r\n                \"flex-direction\": \"row\",\r\n                padding: \"16px 8px\",\r\n                \"flex-wrap\": \"wrap\",\r\n                gap: \"12px\",\r\n                overflow: \"auto\"\r\n            },\r\n            \"fm_color_label\": {\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                display: \"flex\",\r\n                gap: \"8px\",\r\n                \"flex-direction\": \"column\",\r\n                padding: \"16px\",\r\n                border: `3px solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                \"border-radius\": '8px',\r\n            },\r\n            \"fm_color_input\": {\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n                \"box-shadow\": \"0px 4px 8px 0px rgba(171, 171, 171, 0.2)\",\r\n                padding: \"0px\",\r\n                margin: \"0px\",\r\n                border: \"none\",\r\n                cursor: \"pointer\",\r\n                \"border-radius\": \"4px\",\r\n            },\r\n            \"fm_title_block\": {\r\n                color: this.fileManagerMutableStyles.colors.text_color,\r\n                \"font-size\": \"20px\",\r\n                \"font-weight\": \"600\",\r\n                display: \"flex\",\r\n                \"flex-direction\": \"column-reverse\",\r\n                gap: \"16px\",\r\n                \"margin-left\": \"12px\",\r\n            },\r\n            \"fm_buttons_panel\": {\r\n                display: \"flex\",\r\n                \"justify-content\": \"flex-end\",\r\n                gap: \"16px\",\r\n                \"align-items\": \"center\"\r\n            },\r\n            \"fm_submit_settings_button\": {\r\n                padding: \"12px\",\r\n                \"background-color\": \"#a7d649\",\r\n                border: \"none\",\r\n                \"border-radius\": \"8px\",\r\n                \"font-weight\": \"600\",\r\n                \"cursor\": \"pointer\"\r\n            },\r\n            \"fm_settings_form\": {\r\n                height: \"85%\",\r\n                display: \"flex\",\r\n                \"flex-direction\": \"column\",\r\n                \"justify-content\": \"space-between\",\r\n                \"box-sizing\": \"border-box\",\r\n            },\r\n            \"fm_reset_settings_button\": {\r\n                padding: \"12px\",\r\n                \"background-color\": \"#a9b09b\",\r\n                border: \"none\",\r\n                \"border-radius\": \"8px\",\r\n                \"font-weight\": \"600\",\r\n                \"cursor\": \"pointer\"\r\n            },\r\n            \"fm_message_submit\": {\r\n                color: \"#a7d649\"\r\n            },\r\n            \"fm_files_tiles\": {\r\n                // display: \"flex\",\r\n                \"flex-wrap\": \"wrap\",\r\n                \"flex-direction\": \"row\",\r\n                // \"justify-content\": \"center\",\r\n                \"row-gap\": this.settingSizing([8], \"files_panel\"),\r\n                \"column-gap\": \"1%\",\r\n                padding: this.settingSizing([12], \"files_panel\"),\r\n                \"box-sizing\": \"border-box\",\r\n                \"height\": \"100%\",\r\n                \"align-content\": \"flex-start\",\r\n            },\r\n            \"fm_selected\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.selected,\r\n                \"border-radius\": \"4px\"\r\n            },\r\n            \"fm_file_block_tiles\": {\r\n                width: this.settingSizing([90], \"files_panel\"),\r\n                display: 'flex',\r\n                \"flex-direction\": 'column',\r\n                \"align-items\": 'center',\r\n                \"justify-content\": \"space-beetwen\",\r\n                gap: this.settingSizing([8], \"files_panel\"),\r\n                border: this.settingSizing([3], \"files_panel\") + ` solid ${this.fileManagerMutableStyles.colors.border}`,\r\n                padding: this.settingSizing([6], \"files_panel\"),\r\n                cursor: 'pointer',\r\n                \"box-sizing\": \"border-box\",\r\n                \"border-radius\": \"6px\",\r\n                \"overflow\": \"hidden\",\r\n                height: this.settingSizing([104], \"files_panel\"),\r\n                // \"justify-content\": \"center\",\r\n            },\r\n            \"fm_file_name_tiles\": {\r\n                // width: '80px',\r\n                \"box-sizing\": \"border-box\",\r\n                \"font-size\": this.settingSizing([13], \"files_panel\"),\r\n                \"text-align\": \"center\",\r\n                \"overflow\": \"hidden\",\r\n                \"word-break\": \"break-all\",\r\n                \"display\": \"flex\",\r\n                \"text-overflow\": \"ellipsis\",\r\n                \"font-weight\": \"500\",\r\n                \"user-select\": \"none\"\r\n            },\r\n            \"fm_file_icon_tiles\": {\r\n                \"max-width\": this.settingSizing([62], \"files_panel\"),\r\n                \"max-height\": this.settingSizing([41], \"files_panel\"),\r\n                \"user-select\": 'none',\r\n            },\r\n            \"fm_loader\": {\r\n                width: \"48px\",\r\n                height: \"48px\",\r\n                // border: \"5px solid #fff\",\r\n                \"border-radius\": \"50%\",\r\n                display: \"inline-block\",\r\n                \"box-sizing\": \"border-box\",\r\n                \"border-top\": \"4px solid #FFF\",\r\n                \"border-right\": \"4px solid transparent\",\r\n            },\r\n            \"fm_loader_wrapper\": {\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                \"align-items\": \"center\",\r\n                \"justify-content\": \"center\",\r\n            },\r\n            \"fm_select_input\": {\r\n                width: \"75px\",\r\n                height: \"22px\",\r\n                \"border-radius\": \"4px\"\r\n            },\r\n            \"fm_file_name_wrapper\": {\r\n                \"max-height\": '100%',\r\n                \"box-sizing\": 'border-box',\r\n                \"overflow\": \"hidden\",\r\n            }\r\n        };\r\n    }\r\n    updateFileManagerHeaderStyles() {\r\n        this.fileManagerHeaderStyles = {\r\n            \"fm_folder_parent:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n            },\r\n            'fm_folders_nav::-webkit-scrollbar': {\r\n                width: this.settingSizing([10], \"folders_panel\"),\r\n            },\r\n            'fm_files_panel::-webkit-scrollbar': {\r\n                width: this.settingSizing([10], \"files_panel\"),\r\n            },\r\n            'fm_folders_nav::-webkit-scrollbar-track': {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.border,\r\n            },\r\n            'fm_files_panel::-webkit-scrollbar-track': {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.border,\r\n            },\r\n            'fm_folders_nav::-webkit-scrollbar-thumb': {\r\n                \"background-color\": '#888',\r\n            },\r\n            'fm_files_panel::-webkit-scrollbar-thumb': {\r\n                \"background-color\": '#888',\r\n            },\r\n            \"fm_arrow_wrapper:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n            },\r\n            \"fm_arrow_wrapper:active\": {\r\n                opacity: '0.6',\r\n            },\r\n            \"fm_add_file_button:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n            },\r\n            \"fm_tool:hover, fm_leave_settings_arrow:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n                \"border-radius\": '4px',\r\n            },\r\n            \"fm_leave_settings_arrow:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n                \"border-radius\": '4px',\r\n            },\r\n            \"fm_path_folder:hover\": {\r\n                color: '#dcdbdb',\r\n                cursor: 'pointer',\r\n            },\r\n            \"fm_file_block:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover\r\n            },\r\n            \"fm_file_block_tiles:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover\r\n            },\r\n            \"fm_search:focus\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.hover,\r\n            },\r\n            \"fm_upload_files_func_wrapper:hover\": {\r\n                \"background-color\": this.fileManagerMutableStyles.colors.selected,\r\n            },\r\n            \"fm_submit_settings_button:hover\": {\r\n                \"background-color\": \"#94be41\",\r\n            },\r\n            \"fm_reset_settings_button:hover\": {\r\n                \"background-color\": \"#9aa08e\",\r\n            },\r\n        };\r\n    }\r\n    fmAddClass(element, classname) {\r\n        Object.assign(element.style, this.fileManagerStyles[classname]);\r\n    }\r\n    fmRemoveClass(element, classname) {\r\n        let element_styles = this.fileManagerStyles[classname];\r\n        for (let key in element_styles) {\r\n            if (classname === \"fm_openedFile\" && key === \"background-color\") {\r\n                element.style.backgroundColor = \"\";\r\n            }\r\n            else if (classname === \"fm_folder_parent__opened\" && key === \"background-color\") {\r\n                element.style.backgroundColor = \"\";\r\n            }\r\n            else if (classname === \"fm_selected\" && key === \"background-color\") {\r\n                element.style.backgroundColor = \"\";\r\n            }\r\n            else if (classname === \"fm_disabled\" && key === 'opacity') {\r\n                element.style.opacity = \"1\";\r\n            }\r\n            else if (classname === \"fm_hidden\" && key === 'display') {\r\n                element.style.display = \"block\";\r\n            }\r\n        }\r\n    }\r\n    settingSizing(settings, panel) {\r\n        let final_settings = \"\";\r\n        let multy = 1;\r\n        if (this.fileManagerMutableStyles.sizing[panel] === \"xsmall\") {\r\n            multy = 0.75;\r\n        }\r\n        else if (this.fileManagerMutableStyles.sizing[panel] === \"small\") {\r\n            multy = 0.9;\r\n        }\r\n        else if (this.fileManagerMutableStyles.sizing[panel] === \"medium\") {\r\n            multy = 1;\r\n        }\r\n        else if (this.fileManagerMutableStyles.sizing[panel] === \"large\") {\r\n            multy = 1.2;\r\n        }\r\n        else if (this.fileManagerMutableStyles.sizing[panel] === \"xlarge\") {\r\n            multy = 1.4;\r\n        }\r\n        for (let i = 0; i < settings.length; i++) {\r\n            final_settings += String(settings[i] * multy) + \"px \";\r\n        }\r\n        return final_settings.trim();\r\n    }\r\n    updateHeaderStyles() {\r\n        this.headerStyleElement.textContent = `\r\n            .fm_loader::after {\r\n                content: '';  \r\n                box-sizing: border-box;\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                width: 48px;\r\n                height: 48px;\r\n                border-radius: 50%;\r\n                border-bottom: 4px solid #FF3D00;\r\n                border-left: 4px solid transparent;\r\n            }\r\n        `;\r\n        for (let classname in this.fileManagerHeaderStyles) {\r\n            this.headerStyleElement.textContent += `.${classname} {\\n`;\r\n            for (let style in this.fileManagerHeaderStyles[classname]) {\r\n                this.headerStyleElement.textContent += `    ${style}: ${this.fileManagerHeaderStyles[classname][style]} !important;\\n`;\r\n            }\r\n            this.headerStyleElement.textContent += `}\\n`;\r\n        }\r\n    }\r\n    updateUpdatableElements() {\r\n        for (let key in this.updatableElements) {\r\n            this.updatableElements[key].forEach(element => {\r\n                Object.assign(element.style, this.fileManagerStyles[key]);\r\n            });\r\n        }\r\n    }\r\n    updateMutableStyles() {\r\n        this.fileManagerMutableStyles = JSON.parse(localStorage.fmMutableStyles);\r\n    }\r\n    setMutableStyles(mutableStyles) {\r\n        localStorage.fmMutableStyles = JSON.stringify(mutableStyles);\r\n    }\r\n    getDefaultMutableStyles() {\r\n        return JSON.parse(localStorage.fmDefaultMutableStyles);\r\n    }\r\n    setDefaultMutableStyles() {\r\n        let defaultMutableStyles = {\r\n            \"colors\": {\r\n                hover: \"#3e3e3e\",\r\n                border: \"#2B2B2B\",\r\n                main_background: \"#252526\",\r\n                selected: \"#4a4a4a\",\r\n                text_color: \"#ffffff\"\r\n            },\r\n            \"sizing\": {\r\n                tools: \"medium\",\r\n                navigation: \"medium\",\r\n                folders_panel: \"medium\",\r\n                files_panel: \"medium\",\r\n            }\r\n        };\r\n        localStorage.fmDefaultMutableStyles = JSON.stringify(defaultMutableStyles);\r\n    }\r\n    addRotationAnimation(element) {\r\n        element.animate([\r\n            { transform: 'rotate(0deg)' },\r\n            { transform: 'rotate(360deg)' }\r\n        ], {\r\n            duration: 1000,\r\n            iterations: Infinity,\r\n            easing: 'linear'\r\n        });\r\n    }\r\n}\r\n\r\n\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass FileManagerServer {\r\n}\r\nclass FileManager {\r\n    constructor(root, FileManagerServer, rootFolderName = 'Root') {\r\n        this.image_extension = ['png', 'jpg', 'jpeg', 'webp'];\r\n        this.FileManagerStyles = new FileManagerStyles();\r\n        this.lastFolders = [];\r\n        this.currentPath = '/';\r\n        this.currentFilePath = '/';\r\n        this.selectedFilePath = '/';\r\n        this.duplicateState = false;\r\n        this.cutState = false;\r\n        this.openFolders = [];\r\n        this.settingsColorInput = {};\r\n        this.toolsState = {\r\n            remove: false,\r\n            cut: false,\r\n            duplicate: false,\r\n            insert: false,\r\n            rename: false\r\n        };\r\n        if (localStorage.fmFilesDisplayMode) {\r\n            this.filesDisplayMode = localStorage.fmFilesDisplayMode;\r\n        }\r\n        else {\r\n            localStorage.fmFilesDisplayMode = \"list\";\r\n            this.filesDisplayMode = \"list\";\r\n        }\r\n        this.FileManagerStyles.updateHeaderStyles();\r\n        this.rootFolderName = rootFolderName;\r\n        this.FileManagerServer = FileManagerServer;\r\n        this.arrowsState = {\r\n            back_arrow: true,\r\n            up_arrow: false,\r\n        };\r\n        if (!(root instanceof HTMLElement)) {\r\n            throw new SyntaxError(\"An empty or invalid variable type was passed.\");\r\n        }\r\n        this.root = root;\r\n        this.filemanager_root = this.initInterface();\r\n        this.filemanager_root.addEventListener(\"click\", this.handleFilemanagerClick.bind(this));\r\n        let bufferChecker = this.filemanager_root.querySelector(\".fm_upload_files_block\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.uploadFilesPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_settings_panel\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.settingsPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_settings_panel\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.settingsPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_filemanager_navigation\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.navigationPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_filemanager_tools\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.toolsPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_settings_form\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.settingsForm = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_filemanager_main\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.mainPanel = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_current_path\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.currentPathElem = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_files_tiles\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.filesTilesElement = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_files_list\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.files_listHTML = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_metadata_block\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.files_metadataHTML = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        bufferChecker = this.filemanager_root.querySelector(\".fm_loader_wrapper\");\r\n        if (bufferChecker instanceof HTMLElement) {\r\n            this.loaderElem = bufferChecker;\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        const back_arrow = this.filemanager_root.querySelector(\".fm_arrow_back\");\r\n        const up_arrow = this.filemanager_root.querySelector(\".fm_arrow_up\");\r\n        if (back_arrow instanceof HTMLElement && up_arrow instanceof HTMLElement) {\r\n            this.arrowsElements = {\r\n                back_arrow: back_arrow,\r\n                up_arrow: up_arrow,\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        const remove_elem = this.filemanager_root.querySelector(\".fm_remove\");\r\n        const cut_elem = this.filemanager_root.querySelector(\".fm_cut\");\r\n        const duplicate_elem = this.filemanager_root.querySelector(\".fm_duplicate\");\r\n        const insert_elem = this.filemanager_root.querySelector(\".fm_insert\");\r\n        const rename_elem = this.filemanager_root.querySelector(\".fm_rename\");\r\n        if (remove_elem instanceof HTMLElement && cut_elem instanceof HTMLElement && duplicate_elem instanceof HTMLElement && insert_elem instanceof HTMLElement && rename_elem instanceof HTMLElement) {\r\n            this.toolsElements = {\r\n                remove: remove_elem,\r\n                cut: cut_elem,\r\n                duplicate: duplicate_elem,\r\n                insert: insert_elem,\r\n                rename: rename_elem\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        const listDisplayModeIcon = this.filemanager_root.querySelector(\".fm_list\");\r\n        const tilesDisplayModeIcon = this.filemanager_root.querySelector(\".fm_tiles\");\r\n        if (listDisplayModeIcon instanceof HTMLElement && tilesDisplayModeIcon instanceof HTMLElement) {\r\n            this.displayModesElements = {\r\n                list: listDisplayModeIcon,\r\n                tiles: tilesDisplayModeIcon,\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        this.updateBackArrow();\r\n        bufferChecker = document.querySelector(\".fm_folder_root_wrapper\");\r\n        let root_parent = bufferChecker === null || bufferChecker === void 0 ? void 0 : bufferChecker.querySelector(\".fm_folder_parent\");\r\n        if (root_parent instanceof HTMLElement) {\r\n            this.updateFileList(root_parent, true);\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n        this.updateListDisplayIcon();\r\n        this.updateTilesDisplayIcon();\r\n    }\r\n    createHTMLFileList(file) {\r\n        let file_blockHTML = document.createElement(\"div\");\r\n        file_blockHTML.classList.add(\"fm_file_block\");\r\n        this.FileManagerStyles.fmAddClass(file_blockHTML, \"fm_file_block\");\r\n        file_blockHTML.addEventListener(\"click\", this.handleFileClick.bind(this));\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_block\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_block\"].push(file_blockHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_block\"] = [file_blockHTML];\r\n        }\r\n        let file_iconHTML = document.createElement(\"img\");\r\n        file_iconHTML.classList.add(\"fm_file_icon\");\r\n        this.FileManagerStyles.fmAddClass(file_iconHTML, \"fm_file_icon\");\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_icon\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_icon\"].push(file_iconHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_icon\"] = [file_iconHTML];\r\n        }\r\n        let file_typeHTML = document.createElement(\"span\");\r\n        file_typeHTML.classList.add(\"fm_file_type\");\r\n        file_typeHTML.classList.add(\"fm_file_metadata\");\r\n        this.FileManagerStyles.fmAddClass(file_typeHTML, \"fm_file_type\");\r\n        this.FileManagerStyles.fmAddClass(file_typeHTML, \"fm_file_metadata\");\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_metadata\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_metadata\"].push(file_typeHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_metadata\"] = [file_typeHTML];\r\n        }\r\n        if (file.isFolder) {\r\n            file_iconHTML.src = \"icons/folder.png\";\r\n            file_typeHTML.textContent = \"Folder\";\r\n        }\r\n        else {\r\n            let ext = file.name.split('.');\r\n            if (this.image_extension.includes(ext[ext.length - 1])) {\r\n                file_iconHTML.src = \"icons/picture.png\";\r\n                file_typeHTML.textContent = \"Image\";\r\n            }\r\n            else {\r\n                file_iconHTML.src = \"icons/textfile.png\";\r\n                file_typeHTML.textContent = \"Text File\";\r\n            }\r\n        }\r\n        let file_nameHTML = document.createElement(\"span\");\r\n        file_nameHTML.classList.add(\"fm_file_name\");\r\n        file_nameHTML.classList.add(\"fm_file_metadata\");\r\n        this.FileManagerStyles.fmAddClass(file_nameHTML, \"fm_file_name\");\r\n        this.FileManagerStyles.fmAddClass(file_nameHTML, \"fm_file_metadata\");\r\n        this.FileManagerStyles.updatableElements[\"fm_file_metadata\"].push(file_nameHTML);\r\n        file_nameHTML.textContent = file.name;\r\n        let file_changedateHTML = document.createElement(\"span\");\r\n        file_changedateHTML.classList.add(\"fm_file_changedate\");\r\n        file_changedateHTML.classList.add(\"fm_file_metadata\");\r\n        this.FileManagerStyles.fmAddClass(file_changedateHTML, \"fm_file_changedate\");\r\n        this.FileManagerStyles.fmAddClass(file_changedateHTML, \"fm_file_metadata\");\r\n        this.FileManagerStyles.updatableElements[\"fm_file_metadata\"].push(file_changedateHTML);\r\n        file_changedateHTML.textContent = file.changedate;\r\n        let file_sizeHTML = document.createElement(\"span\");\r\n        file_sizeHTML.classList.add(\"fm_file_size\");\r\n        file_sizeHTML.classList.add(\"fm_file_metadata\");\r\n        this.FileManagerStyles.fmAddClass(file_sizeHTML, \"fm_file_size\");\r\n        this.FileManagerStyles.fmAddClass(file_sizeHTML, \"fm_file_metadata\");\r\n        this.FileManagerStyles.updatableElements[\"fm_file_metadata\"].push(file_sizeHTML);\r\n        if (!file.isFolder) {\r\n            // let size = Number(file.size.replace(/^\\D+/g, ''));\r\n            const match = file.size.match(/-?\\d+(\\.\\d+)?/);\r\n            let size = match ? parseFloat(match[0]) : NaN;\r\n            if (size > 1024) {\r\n                size = size / 1024;\r\n                file_sizeHTML.textContent = String(Math.round(size * 10) / 10) + \" КБ\";\r\n            }\r\n            else if (size > 1024 * 1024) {\r\n                size = size / (1024 * 1024);\r\n                file_sizeHTML.textContent = String(Math.round(size * 10) / 10) + \" МБ\";\r\n            }\r\n            else {\r\n                file_sizeHTML.textContent = String(size) + \" Байт\";\r\n            }\r\n        }\r\n        else {\r\n            file_sizeHTML.textContent = \"\";\r\n        }\r\n        file_blockHTML.append(file_iconHTML);\r\n        file_blockHTML.append(file_nameHTML);\r\n        file_blockHTML.append(file_changedateHTML);\r\n        file_blockHTML.append(file_typeHTML);\r\n        file_blockHTML.append(file_sizeHTML);\r\n        this.files_listHTML.append(file_blockHTML);\r\n        return file_blockHTML;\r\n    }\r\n    createHTMLFileTiles(file) {\r\n        let file_blockHTML = document.createElement(\"div\");\r\n        file_blockHTML.classList.add(\"fm_file_block\");\r\n        file_blockHTML.classList.add(\"fm_file_block_tiles\");\r\n        this.FileManagerStyles.fmAddClass(file_blockHTML, \"fm_file_block_tiles\");\r\n        file_blockHTML.addEventListener(\"click\", this.handleFileClick.bind(this));\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_block_tiles\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_block_tiles\"].push(file_blockHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_block_tiles\"] = [file_blockHTML];\r\n        }\r\n        let file_iconHTML = document.createElement(\"img\");\r\n        file_iconHTML.classList.add(\"fm_file_icon\");\r\n        this.FileManagerStyles.fmAddClass(file_iconHTML, \"fm_file_icon_tiles\");\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_icon_tiles\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_icon_tiles\"].push(file_iconHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_icon_tiles\"] = [file_iconHTML];\r\n        }\r\n        if (file.isFolder) {\r\n            file_iconHTML.src = \"icons/folder.png\";\r\n        }\r\n        else {\r\n            let ext = file.name.split('.');\r\n            if (this.image_extension.includes(ext[ext.length - 1])) {\r\n                if (file.image) {\r\n                    file_iconHTML.src = file.image;\r\n                }\r\n                else {\r\n                    file_iconHTML.src = \"icons/picture.png\";\r\n                }\r\n            }\r\n            else {\r\n                file_iconHTML.src = \"icons/textfile.png\";\r\n            }\r\n        }\r\n        let file_nameHTML = document.createElement(\"span\");\r\n        file_nameHTML.classList.add(\"fm_file_name\");\r\n        file_nameHTML.classList.add(\"fm_file_metadata\");\r\n        this.FileManagerStyles.fmAddClass(file_nameHTML, \"fm_file_name_tiles\");\r\n        file_nameHTML.textContent = file.name;\r\n        if (this.FileManagerStyles.updatableElements[\"fm_file_name_tiles\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_name_tiles\"].push(file_nameHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_file_name_tiles\"] = [file_nameHTML];\r\n        }\r\n        file_blockHTML.append(file_iconHTML);\r\n        file_blockHTML.append(file_nameHTML);\r\n        this.filesTilesElement.append(file_blockHTML);\r\n        return file_blockHTML;\r\n    }\r\n    createHTMLNavFolder(folder, root, initial = false) {\r\n        let root_parent = root.parentElement;\r\n        let root_parent_path = root_parent === null || root_parent === void 0 ? void 0 : root_parent.getAttribute(\"path\");\r\n        if (!root_parent_path && !initial) {\r\n            throw new Error('Element does not have a path attribute');\r\n        }\r\n        let folder_wrapperHTML = document.createElement(\"div\");\r\n        folder_wrapperHTML.classList.add(\"fm_folder_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(folder_wrapperHTML, \"fm_folder_wrapper\");\r\n        if (this.FileManagerStyles.updatableElements[\"fm_folder_wrapper\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_wrapper\"].push(folder_wrapperHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_wrapper\"] = [folder_wrapperHTML];\r\n        }\r\n        let folder_childrenHTML = document.createElement(\"div\");\r\n        folder_childrenHTML.classList.add(\"fm_folder_children\");\r\n        this.FileManagerStyles.fmAddClass(folder_childrenHTML, \"fm_folder_children\");\r\n        let folderHTML = document.createElement(\"div\");\r\n        folderHTML.classList.add(\"fm_folder_parent\");\r\n        this.FileManagerStyles.fmAddClass(folderHTML, \"fm_folder_parent\");\r\n        let folder_open_icon_wrapperHTML = document.createElement(\"div\");\r\n        folder_open_icon_wrapperHTML.classList.add(\"fm_folder_open_icon_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(folder_open_icon_wrapperHTML, \"fm_folder_open_icon_wrapper\");\r\n        if (this.FileManagerStyles.updatableElements[\"fm_folder_open_icon_wrapper\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_open_icon_wrapper\"].push(folder_open_icon_wrapperHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_open_icon_wrapper\"] = [folder_open_icon_wrapperHTML];\r\n        }\r\n        let folder_open_iconHTML = document.createElement(\"img\");\r\n        folder_open_iconHTML.classList.add(\"fm_folder_open_icon\");\r\n        this.FileManagerStyles.fmAddClass(folder_open_iconHTML, \"fm_folder_open_icon\");\r\n        folder_open_iconHTML.src = \"icons/arrow-point-to-right.png\";\r\n        if (this.FileManagerStyles.updatableElements[\"fm_folder_open_icon\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_open_icon\"].push(folder_open_iconHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_open_icon\"] = [folder_open_iconHTML];\r\n        }\r\n        let folder_iconHTML = document.createElement(\"img\");\r\n        folder_iconHTML.classList.add(\"fm_folder_icon\");\r\n        this.FileManagerStyles.fmAddClass(folder_iconHTML, \"fm_folder_icon\");\r\n        folder_iconHTML.src = \"icons/folder.png\";\r\n        if (this.FileManagerStyles.updatableElements[\"fm_folder_icon\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_icon\"].push(folder_iconHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_icon\"] = [folder_iconHTML];\r\n        }\r\n        let folder_nameHTML = document.createElement(\"span\");\r\n        folder_nameHTML.classList.add(\"fm_folder_name\");\r\n        this.FileManagerStyles.fmAddClass(folder_nameHTML, \"fm_folder_name\");\r\n        folder_nameHTML.textContent = folder.name;\r\n        if (this.FileManagerStyles.updatableElements[\"fm_folder_name\"]) {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_name\"].push(folder_nameHTML);\r\n        }\r\n        else {\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_name\"] = [folder_nameHTML];\r\n        }\r\n        folder_open_icon_wrapperHTML.append(folder_open_iconHTML);\r\n        folderHTML.append(folder_open_icon_wrapperHTML);\r\n        folderHTML.append(folder_iconHTML);\r\n        folderHTML.append(folder_nameHTML);\r\n        if (initial) {\r\n            folder_wrapperHTML.setAttribute(\"path\", \"/\");\r\n        }\r\n        else {\r\n            if (root_parent_path === \"/\") {\r\n                folder_wrapperHTML.setAttribute(\"path\", root_parent_path + folder.name);\r\n            }\r\n            else {\r\n                folder_wrapperHTML.setAttribute(\"path\", root_parent_path + \"/\" + folder.name);\r\n            }\r\n        }\r\n        folder_wrapperHTML.append(folderHTML);\r\n        folder_wrapperHTML.append(folder_childrenHTML);\r\n        root.append(folder_wrapperHTML);\r\n        return [folder_open_icon_wrapperHTML, folderHTML, folder_wrapperHTML];\r\n    }\r\n    openCloseFolder(folder_parent_1) {\r\n        return __awaiter(this, arguments, void 0, function* (folder_parent, from = \"nav\") {\r\n            let folder_open_icon = folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.querySelector('.fm_folder_open_icon');\r\n            let folder_wrapper = folder_parent.closest('.fm_folder_wrapper');\r\n            let folder_children = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector('.fm_folder_children');\r\n            let folder_name = folder_parent.querySelector('.fm_folder_name');\r\n            if (folder_wrapper != null && folder_name != null && folder_open_icon != null && folder_open_icon instanceof HTMLImageElement && folder_children != null && folder_children != undefined) {\r\n                let children = folder_children.children;\r\n                if ((folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.contains('fm_opened')) && from !== \"filelist\") {\r\n                    folder_parent.classList.remove('fm_opened');\r\n                    this.FileManagerStyles.fmRemoveClass(folder_parent, \"fm_opened\");\r\n                    folder_open_icon.src = \"icons/arrow-point-to-right.png\";\r\n                    for (const child of children) {\r\n                        if (child instanceof HTMLElement) {\r\n                            child.style.display = \"none\";\r\n                        }\r\n                    }\r\n                }\r\n                else if (!(folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.contains('fm_opened'))) {\r\n                    folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.add('fm_opened');\r\n                    this.FileManagerStyles.fmAddClass(folder_parent, \"fm_opened\");\r\n                    folder_open_icon.src = \"icons/arrow-point-to-down.png\";\r\n                    if (children.length === 0) {\r\n                        if (folder_name === null || folder_name === void 0 ? void 0 : folder_name.textContent) {\r\n                            let path = folder_wrapper.getAttribute(\"path\");\r\n                            if (path) {\r\n                                this.currentPath = path;\r\n                                yield this.getInternalFolders(folder_children, path);\r\n                                this.updateUpArrow(path);\r\n                                this.updateRemove();\r\n                                this.updateRename();\r\n                                this.updateDuplicate();\r\n                                this.updateCut();\r\n                                this.updateBackArrow();\r\n                            }\r\n                        }\r\n                        else {\r\n                            throw new Error('The hierarchy of elements was violated');\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (const child of children) {\r\n                            if (child instanceof HTMLElement) {\r\n                                child.style.display = \"block\";\r\n                            }\r\n                            else {\r\n                                throw new Error('The hierarchy of elements was violated');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('The hierarchy of elements was violated');\r\n            }\r\n        });\r\n    }\r\n    handleOpenNavFolder(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            event.stopPropagation();\r\n            if (event.target != null && event.target instanceof HTMLElement) {\r\n                let targetElem = event.target;\r\n                let folder_parent = targetElem.closest('.fm_folder_parent');\r\n                if (folder_parent != null && folder_parent instanceof HTMLElement) {\r\n                    yield this.openCloseFolder(folder_parent, 'nav');\r\n                }\r\n                else {\r\n                    throw new Error('The hierarchy of elements was violated');\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('The hierarchy of elements was violated');\r\n            }\r\n        });\r\n    }\r\n    focusNavFolder(folder_parent, back) {\r\n        var _a;\r\n        if (folder_parent !== this.currentFolder) {\r\n            if (this.currentFolder) {\r\n                (_a = this.currentFolder) === null || _a === void 0 ? void 0 : _a.classList.remove(\"fm_folder_parent__opened\");\r\n                this.FileManagerStyles.fmRemoveClass(this.currentFolder, \"fm_folder_parent__opened\");\r\n                if (!back) {\r\n                    this.lastFolders.push(this.currentFolder);\r\n                }\r\n            }\r\n            folder_parent === null || folder_parent === void 0 ? void 0 : folder_parent.classList.add(\"fm_folder_parent__opened\");\r\n            this.FileManagerStyles.fmAddClass(folder_parent, \"fm_folder_parent__opened\");\r\n            this.FileManagerStyles.updatableElements[\"fm_folder_parent__opened\"] = [folder_parent];\r\n            this.currentFolder = folder_parent;\r\n        }\r\n    }\r\n    handleShowFileList(event) {\r\n        event.stopPropagation();\r\n        if (event.target != null && event.target instanceof HTMLElement) {\r\n            let targetElem = event.target;\r\n            this.updateFileList(targetElem);\r\n        }\r\n        else {\r\n            throw new Error('The hierarchy of elements was violated');\r\n        }\r\n    }\r\n    updateListDisplayIcon() {\r\n        if (this.filesDisplayMode === \"list\") {\r\n            this.displayModesElements.list.classList.add(\"fm_disabled\");\r\n            this.displayModesElements.list.classList.add(\"fm_selected\");\r\n            this.FileManagerStyles.fmAddClass(this.displayModesElements.list, \"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.displayModesElements.list, \"fm_selected\");\r\n            this.displayModesElements.list.style.pointerEvents = 'none';\r\n        }\r\n        else {\r\n            this.displayModesElements.list.classList.remove(\"fm_disabled\");\r\n            this.displayModesElements.list.classList.remove(\"fm_selected\");\r\n            this.FileManagerStyles.fmRemoveClass(this.displayModesElements.list, \"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.displayModesElements.list, \"fm_selected\");\r\n            this.displayModesElements.list.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n    updateTilesDisplayIcon() {\r\n        if (this.filesDisplayMode === \"tiles\") {\r\n            this.displayModesElements.tiles.classList.add(\"fm_disabled\");\r\n            this.displayModesElements.tiles.classList.add(\"fm_selected\");\r\n            this.FileManagerStyles.fmAddClass(this.displayModesElements.tiles, \"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.displayModesElements.tiles, \"fm_selected\");\r\n            this.displayModesElements.tiles.style.pointerEvents = 'none';\r\n        }\r\n        else {\r\n            this.displayModesElements.tiles.classList.remove(\"fm_disabled\");\r\n            this.displayModesElements.tiles.classList.remove(\"fm_selected\");\r\n            this.FileManagerStyles.fmRemoveClass(this.displayModesElements.tiles, \"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.displayModesElements.tiles, \"fm_selected\");\r\n            this.displayModesElements.tiles.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n    handleListDisplayModeClick(event) {\r\n        if (this.filesDisplayMode !== \"list\") {\r\n            localStorage.fmFilesDisplayMode = \"list\";\r\n            this.filesDisplayMode = \"list\";\r\n            this.files_listHTML.style.display = \"block\";\r\n            this.files_metadataHTML.style.display = \"flex\";\r\n            this.filesTilesElement.style.display = \"none\";\r\n            if (this.currentFolder instanceof HTMLElement) {\r\n                this.updateFileList(this.currentFolder, true);\r\n            }\r\n            this.updateListDisplayIcon();\r\n            this.updateTilesDisplayIcon();\r\n        }\r\n    }\r\n    handleTilesDisplayModeClick(event) {\r\n        if (this.filesDisplayMode !== \"tiles\") {\r\n            localStorage.fmFilesDisplayMode = \"tiles\";\r\n            this.filesDisplayMode = \"tiles\";\r\n            this.files_listHTML.style.display = \"none\";\r\n            this.files_metadataHTML.style.display = \"none\";\r\n            this.filesTilesElement.style.display = \"flex\";\r\n            if (this.currentFolder instanceof HTMLElement) {\r\n                this.updateFileList(this.currentFolder, true);\r\n            }\r\n            this.updateListDisplayIcon();\r\n            this.updateTilesDisplayIcon();\r\n        }\r\n    }\r\n    updateBackArrow() {\r\n        if (this.lastFolders.length > 0 && !this.arrowsState.back_arrow) {\r\n            this.arrowsState.back_arrow = true;\r\n            this.arrowsElements.back_arrow.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.arrowsElements.back_arrow, \"fm_disabled\");\r\n            this.arrowsElements.back_arrow.style.pointerEvents = 'auto';\r\n        }\r\n        else if (this.lastFolders.length === 0 && this.arrowsState.back_arrow) {\r\n            this.arrowsState.back_arrow = false;\r\n            this.arrowsElements.back_arrow.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.arrowsElements.back_arrow, \"fm_disabled\");\r\n            this.arrowsElements.back_arrow.style.pointerEvents = 'none';\r\n        }\r\n    }\r\n    updateUpArrow(path) {\r\n        if (path !== \"/\" && !this.arrowsState.up_arrow) {\r\n            this.arrowsState.up_arrow = true;\r\n            this.arrowsElements.up_arrow.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.arrowsElements.up_arrow, \"fm_disabled\");\r\n            this.arrowsElements.up_arrow.style.pointerEvents = 'auto';\r\n        }\r\n        else if (path === \"/\" && this.arrowsState.up_arrow) {\r\n            this.arrowsState.up_arrow = false;\r\n            this.arrowsElements.up_arrow.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.arrowsElements.up_arrow, \"fm_disabled\");\r\n            this.arrowsElements.up_arrow.style.pointerEvents = 'none';\r\n        }\r\n    }\r\n    updateCurrentPath(path) {\r\n        this.currentPathElem.innerHTML = \"\";\r\n        let path_elements = path.split(\"/\");\r\n        let root_path = document.createElement(\"span\");\r\n        root_path.classList.add(\"fm_path_folder\");\r\n        this.FileManagerStyles.fmAddClass(root_path, \"fm_path_folder\");\r\n        this.FileManagerStyles.updatableElements[\"fm_path_folder\"] = [root_path];\r\n        root_path.textContent = this.rootFolderName;\r\n        this.currentPathElem.append(root_path);\r\n        if (path_elements[1] !== '') {\r\n            for (let i = 1; i < path_elements.length; i++) {\r\n                let path_img = document.createElement(\"img\");\r\n                path_img.classList.add(\"fm_path_arrow\");\r\n                this.FileManagerStyles.fmAddClass(path_img, \"fm_path_arrow\");\r\n                path_img.src = \"icons/arrow-right.png\";\r\n                let path_folder = document.createElement(\"span\");\r\n                path_folder.classList.add(\"fm_path_folder\");\r\n                this.FileManagerStyles.fmAddClass(path_folder, \"fm_path_folder\");\r\n                this.FileManagerStyles.updatableElements[\"fm_path_folder\"].push(path_folder);\r\n                path_folder.textContent = path_elements[i];\r\n                this.currentPathElem.append(path_img);\r\n                this.currentPathElem.append(path_folder);\r\n            }\r\n        }\r\n    }\r\n    handleBackArrowClick(event) {\r\n        event.stopPropagation();\r\n        if (this.lastFolders.length > 0) {\r\n            let lastFolder = this.lastFolders.pop();\r\n            if (lastFolder) {\r\n                this.updateFileList(lastFolder, true);\r\n            }\r\n        }\r\n    }\r\n    handleUpArrowClick(event) {\r\n        var _a, _b, _c;\r\n        event.stopPropagation();\r\n        if (this.currentFolder instanceof HTMLElement) {\r\n            let folder_wrapper = (_c = (_b = (_a = this.currentFolder) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.parentElement;\r\n            let folder_parent = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector('.fm_folder_parent');\r\n            if (folder_parent instanceof HTMLElement) {\r\n                this.updateFileList(folder_parent, true);\r\n            }\r\n        }\r\n    }\r\n    handleRefreshClick(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.currentFolder instanceof HTMLElement) {\r\n                yield this.updateNavFolders();\r\n                this.updateFileList(this.currentFolder, true);\r\n                this.selectedFilePath = \"/\";\r\n                this.toolsState.cut = false;\r\n                this.toolsState.duplicate = false;\r\n                this.updateInsert();\r\n            }\r\n        });\r\n    }\r\n    handleUploadClick(event) {\r\n        if (this.uploadFilesPanel.classList.contains(\"fm_hidden\")) {\r\n            this.FileManagerStyles.fmRemoveClass(this.uploadFilesPanel, \"fm_hidden\");\r\n            this.uploadFilesPanel.classList.remove(\"fm_hidden\");\r\n        }\r\n        else {\r\n            this.FileManagerStyles.fmAddClass(this.uploadFilesPanel, \"fm_hidden\");\r\n            this.uploadFilesPanel.classList.add(\"fm_hidden\");\r\n        }\r\n    }\r\n    handleSubmitSettings(event) {\r\n        event.preventDefault();\r\n        let newMutableStyles = {\r\n            \"colors\": {\r\n                hover: this.settingsForm.hover_color.value,\r\n                border: this.settingsForm.border_color.value,\r\n                main_background: this.settingsForm.background_color.value,\r\n                selected: this.settingsForm.select_color.value,\r\n                text_color: this.settingsForm.text_color.value\r\n            },\r\n            \"sizing\": {\r\n                tools: this.settingsForm.tools.value,\r\n                navigation: this.settingsForm.navigation.value,\r\n                files_panel: this.settingsForm.files_panel.value,\r\n                folders_panel: this.settingsForm.folders_panel.value,\r\n                settings_panel: this.settingsForm.folders_panel.value,\r\n            }\r\n        };\r\n        this.FileManagerStyles.setMutableStyles(newMutableStyles);\r\n        this.FileManagerStyles.updateMutableStyles();\r\n        this.FileManagerStyles.updateFileManagerStyles();\r\n        this.FileManagerStyles.updateFileManagerHeaderStyles();\r\n        this.FileManagerStyles.updateHeaderStyles();\r\n        this.FileManagerStyles.updateUpdatableElements();\r\n        this.mainPanel.style.display = \"none\";\r\n        this.toolsPanel.style.display = \"none\";\r\n        this.navigationPanel.style.display = \"none\";\r\n        this.FileManagerStyles.fmAddClass(this.uploadFilesPanel, \"fm_hidden\");\r\n        let message_submitHTML = this.filemanager_root.querySelector(\".fm_message_submit\");\r\n        if (message_submitHTML instanceof HTMLElement) {\r\n            message_submitHTML.textContent = \"Success\";\r\n            setTimeout(() => {\r\n                message_submitHTML.textContent = \"\";\r\n            }, 2000);\r\n        }\r\n    }\r\n    handleResetSettings(event) {\r\n        event.preventDefault();\r\n        let result = window.confirm(\"Are you sure you want to reset?\");\r\n        if (result) {\r\n            let newMutableStyles = this.FileManagerStyles.getDefaultMutableStyles();\r\n            this.FileManagerStyles.setMutableStyles(newMutableStyles);\r\n            this.FileManagerStyles.updateMutableStyles();\r\n            this.FileManagerStyles.updateFileManagerStyles();\r\n            this.FileManagerStyles.updateFileManagerHeaderStyles();\r\n            this.FileManagerStyles.updateHeaderStyles();\r\n            this.FileManagerStyles.updateUpdatableElements();\r\n            this.updateSettingsColorInputs();\r\n            this.mainPanel.style.display = \"none\";\r\n            this.toolsPanel.style.display = \"none\";\r\n            this.navigationPanel.style.display = \"none\";\r\n            this.FileManagerStyles.fmAddClass(this.uploadFilesPanel, \"fm_hidden\");\r\n            let message_submitHTML = this.filemanager_root.querySelector(\".fm_message_submit\");\r\n            if (message_submitHTML instanceof HTMLElement) {\r\n                message_submitHTML.textContent = \"Success\";\r\n                setTimeout(() => {\r\n                    message_submitHTML.textContent = \"\";\r\n                }, 2000);\r\n            }\r\n        }\r\n    }\r\n    updateFileList(targetElement_1) {\r\n        return __awaiter(this, arguments, void 0, function* (targetElement, back = false) {\r\n            let folder_wrapper = targetElement.closest('.fm_folder_wrapper');\r\n            if (folder_wrapper) {\r\n                let folder_parent = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector('.fm_folder_parent');\r\n                if (folder_parent instanceof HTMLElement) {\r\n                    let path = folder_wrapper.getAttribute(\"path\");\r\n                    if (path) {\r\n                        this.currentPath = path;\r\n                        yield this.getInternalFiles(path);\r\n                        this.focusNavFolder(folder_parent, back);\r\n                        this.updateUpArrow(path);\r\n                        this.clearCurrentFile();\r\n                        this.updateBackArrow();\r\n                        this.updateCurrentPath(path);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleUploadingFile(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            event.preventDefault();\r\n            let input_file = this.filemanager_root.querySelector('.fm_upload_file_func_input');\r\n            if (input_file instanceof HTMLInputElement && input_file.files) {\r\n                const file = input_file.files[0];\r\n                if (!file) {\r\n                    return;\r\n                }\r\n                try {\r\n                    yield this.FileManagerServer.uploadFile(file, this.currentPath);\r\n                }\r\n                catch (error) {\r\n                    throw error;\r\n                }\r\n                this.getInternalFiles(this.currentPath);\r\n                this.updateUpArrow(this.currentPath);\r\n                this.updateRemove();\r\n                this.updateRename();\r\n                this.updateDuplicate();\r\n                this.updateCut();\r\n                this.updateInsert();\r\n                this.updateCurrentPath(this.currentPath);\r\n                this.updateBackArrow();\r\n                input_file.value = \"\";\r\n            }\r\n        });\r\n    }\r\n    openPreviousFolders() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            for (let i = 0; i < this.openFolders.length; i++) {\r\n                let check_wrapper = this.filemanager_root.querySelector(`[path=\"${this.openFolders[i]}\"]`);\r\n                let open_folder = check_wrapper === null || check_wrapper === void 0 ? void 0 : check_wrapper.querySelector(\".fm_folder_parent\");\r\n                if (open_folder instanceof HTMLElement) {\r\n                    yield this.openCloseFolder(open_folder);\r\n                }\r\n            }\r\n            this.openFolders = [];\r\n        });\r\n    }\r\n    searchOpenFoldersStart() {\r\n        let folder_root_wrapper = this.filemanager_root.querySelector(\".fm_folder_root_wrapper\");\r\n        let folder_children_element = folder_root_wrapper === null || folder_root_wrapper === void 0 ? void 0 : folder_root_wrapper.querySelector(\".fm_folder_children\");\r\n        let folder_children = folder_children_element === null || folder_children_element === void 0 ? void 0 : folder_children_element.children;\r\n        if (folder_children) {\r\n            for (let i = 0; i < folder_children.length; i++) {\r\n                this.searchOpenFoldersRecursion(folder_children[i]);\r\n            }\r\n        }\r\n    }\r\n    searchOpenFoldersRecursion(folder_wrapper) {\r\n        let folder_children_element = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector(\".fm_folder_children\");\r\n        let folder_children = folder_children_element === null || folder_children_element === void 0 ? void 0 : folder_children_element.children;\r\n        let folder_parent = folder_wrapper === null || folder_wrapper === void 0 ? void 0 : folder_wrapper.querySelector(\".fm_folder_parent\");\r\n        if (folder_parent && folder_parent.classList.contains(\"fm_opened\") && folder_wrapper instanceof HTMLElement) {\r\n            let path = folder_wrapper.getAttribute(\"path\");\r\n            if (path) {\r\n                this.openFolders.push(path);\r\n            }\r\n        }\r\n        if (folder_children) {\r\n            for (let i = 0; i < folder_children.length; i++) {\r\n                this.searchOpenFoldersRecursion(folder_children[i]);\r\n            }\r\n        }\r\n    }\r\n    updateNavFolders() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let folder_root_wrapper = this.filemanager_root.querySelector(\".fm_folder_root_wrapper\");\r\n            let folder_root_parent = folder_root_wrapper === null || folder_root_wrapper === void 0 ? void 0 : folder_root_wrapper.querySelector(\".fm_folder_parent\");\r\n            let folder_root_childen_element = folder_root_wrapper === null || folder_root_wrapper === void 0 ? void 0 : folder_root_wrapper.querySelector(\".fm_folder_children\");\r\n            let folder_open_icon = folder_root_parent === null || folder_root_parent === void 0 ? void 0 : folder_root_parent.querySelector('.fm_folder_open_icon');\r\n            if (folder_root_parent instanceof HTMLElement && folder_root_childen_element && folder_open_icon instanceof HTMLImageElement) {\r\n                let buffer_currentPath = this.currentPath;\r\n                this.searchOpenFoldersStart();\r\n                folder_root_childen_element.innerHTML = \"\";\r\n                if (folder_root_parent === null || folder_root_parent === void 0 ? void 0 : folder_root_parent.classList.contains('fm_opened')) {\r\n                    folder_root_parent.classList.remove('fm_opened');\r\n                    this.FileManagerStyles.fmRemoveClass(folder_root_parent, \"fm_opened\");\r\n                    folder_open_icon.src = \"icons/arrow-point-to-right.png\";\r\n                }\r\n                else if (!(folder_root_parent === null || folder_root_parent === void 0 ? void 0 : folder_root_parent.classList.contains('fm_opened'))) {\r\n                    folder_root_parent === null || folder_root_parent === void 0 ? void 0 : folder_root_parent.classList.add('fm_opened');\r\n                    this.FileManagerStyles.fmAddClass(folder_root_parent, \"fm_opened\");\r\n                    folder_open_icon.src = \"icons/arrow-point-to-down.png\";\r\n                }\r\n                yield this.openCloseFolder(folder_root_parent, 'nav');\r\n                yield this.openPreviousFolders();\r\n                this.currentPath = buffer_currentPath;\r\n                let bufferCurrentFolder = this.filemanager_root.querySelector(`[path=\"${this.currentPath}\"]`);\r\n                if (bufferCurrentFolder instanceof HTMLElement) {\r\n                    this.currentFolder = bufferCurrentFolder;\r\n                }\r\n                else {\r\n                    this.currentPath = \"/\";\r\n                    let bufferCurrentFolder = this.filemanager_root.querySelector(`[path=\"${this.currentPath}\"]`);\r\n                    if (bufferCurrentFolder instanceof HTMLElement) {\r\n                        this.currentFolder = bufferCurrentFolder;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleUploadingFolder(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            event.preventDefault();\r\n            let input_folder = this.filemanager_root.querySelector('.fm_upload_files_func_input');\r\n            if (input_folder instanceof HTMLInputElement && input_folder.files) {\r\n                const files = input_folder.files;\r\n                if (files.length === 0) {\r\n                    return;\r\n                }\r\n                try {\r\n                    yield this.FileManagerServer.uploadFolder(files, this.currentPath);\r\n                }\r\n                catch (error) {\r\n                    throw error;\r\n                }\r\n                input_folder.value = \"\";\r\n                yield this.updateNavFolders();\r\n                if (this.currentFolder instanceof HTMLElement) {\r\n                    this.updateFileList(this.currentFolder);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleOpenFileListFolder(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b, _c, _d;\r\n            event.stopPropagation();\r\n            if (event.target != null && event.target instanceof HTMLElement) {\r\n                if (this.currentFolder != null) {\r\n                    yield this.openCloseFolder(this.currentFolder, 'filelist');\r\n                }\r\n                let targetElem = event.target;\r\n                let file_block = targetElem.closest('.fm_file_block');\r\n                let file_name = file_block === null || file_block === void 0 ? void 0 : file_block.querySelector('.fm_file_name');\r\n                let currentWrapper = (_a = this.currentFolder) === null || _a === void 0 ? void 0 : _a.parentElement;\r\n                let currentChildren = (_b = currentWrapper === null || currentWrapper === void 0 ? void 0 : currentWrapper.querySelector('.fm_folder_children')) === null || _b === void 0 ? void 0 : _b.children;\r\n                if (file_block != null && file_name != null && currentWrapper != null && (file_name === null || file_name === void 0 ? void 0 : file_name.textContent) && currentChildren != null) {\r\n                    let newCurrentFolder;\r\n                    let newCurrentFolderWrapper;\r\n                    for (let wrapper of currentChildren) {\r\n                        if (((_c = wrapper === null || wrapper === void 0 ? void 0 : wrapper.querySelector(\".fm_folder_name\")) === null || _c === void 0 ? void 0 : _c.textContent) === (file_name === null || file_name === void 0 ? void 0 : file_name.textContent)) {\r\n                            newCurrentFolder = wrapper === null || wrapper === void 0 ? void 0 : wrapper.querySelector(\".fm_folder_parent\");\r\n                            newCurrentFolderWrapper = wrapper;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (newCurrentFolder && newCurrentFolder instanceof HTMLElement && newCurrentFolderWrapper != null && newCurrentFolderWrapper instanceof HTMLElement) {\r\n                        let path = newCurrentFolderWrapper.getAttribute(\"path\");\r\n                        if (path && this.currentFolder) {\r\n                            this.currentPath = path;\r\n                            (_d = this.currentFolder) === null || _d === void 0 ? void 0 : _d.classList.remove(\"fm_folder_parent__opened\");\r\n                            this.FileManagerStyles.fmRemoveClass(this.currentFolder, \"fm_folder_parent__opened\");\r\n                            newCurrentFolder.classList.add(\"fm_folder_parent__opened\");\r\n                            this.FileManagerStyles.fmAddClass(newCurrentFolder, \"fm_folder_parent__opened\");\r\n                            if (this.currentFolder) {\r\n                                this.lastFolders.push(this.currentFolder);\r\n                            }\r\n                            this.currentFolder = newCurrentFolder;\r\n                            if (this.files_listHTML != null) {\r\n                                this.files_listHTML.innerHTML = \"\";\r\n                                this.getInternalFiles(path);\r\n                                this.updateUpArrow(path);\r\n                                this.updateCurrentPath(path);\r\n                                this.updateBackArrow();\r\n                                this.clearCurrentFile();\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('The hierarchy of elements was violated');\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('The hierarchy of elements was violated');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    updateRemove() {\r\n        if (this.currentFile !== null && this.currentFilePath !== \"/\") {\r\n            this.toolsState.remove = true;\r\n            this.toolsElements.remove.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.toolsElements.remove, \"fm_disabled\");\r\n            this.toolsElements.remove.style.pointerEvents = 'auto';\r\n        }\r\n        else {\r\n            this.toolsState.remove = false;\r\n            this.toolsElements.remove.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.toolsElements.remove, \"fm_disabled\");\r\n            this.toolsElements.remove.style.pointerEvents = 'none';\r\n        }\r\n    }\r\n    updateRename() {\r\n        if (this.currentFile !== null && this.currentFilePath !== \"/\") {\r\n            this.toolsState.rename = true;\r\n            this.toolsElements.rename.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.toolsElements.rename, \"fm_disabled\");\r\n            this.toolsElements.rename.style.pointerEvents = 'auto';\r\n        }\r\n        else {\r\n            this.toolsState.rename = false;\r\n            this.toolsElements.rename.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.toolsElements.rename, \"fm_disabled\");\r\n            this.toolsElements.rename.style.pointerEvents = 'none';\r\n        }\r\n    }\r\n    updateDuplicate() {\r\n        if (this.currentFile !== null && this.currentFilePath !== \"/\") {\r\n            this.toolsState.duplicate = true;\r\n            this.toolsElements.duplicate.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.toolsElements.duplicate, \"fm_disabled\");\r\n            this.toolsElements.duplicate.style.pointerEvents = 'auto';\r\n        }\r\n        else {\r\n            this.toolsState.duplicate = false;\r\n            this.toolsElements.duplicate.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.toolsElements.duplicate, \"fm_disabled\");\r\n            this.toolsElements.duplicate.style.pointerEvents = 'none';\r\n        }\r\n        this.updateInsert();\r\n    }\r\n    updateCut() {\r\n        if (this.currentFile !== null && this.currentFilePath !== \"/\") {\r\n            this.toolsState.cut = true;\r\n            this.toolsElements.cut.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.toolsElements.cut, \"fm_disabled\");\r\n            this.toolsElements.cut.style.pointerEvents = 'auto';\r\n        }\r\n        else {\r\n            this.toolsState.cut = false;\r\n            this.toolsElements.cut.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.toolsElements.cut, \"fm_disabled\");\r\n            this.toolsElements.cut.style.pointerEvents = 'none';\r\n        }\r\n        this.updateInsert();\r\n    }\r\n    updateInsert() {\r\n        if (this.selectedFilePath !== '/') {\r\n            this.toolsState.insert = true;\r\n            this.toolsElements.insert.classList.remove(\"fm_disabled\");\r\n            this.FileManagerStyles.fmRemoveClass(this.toolsElements.insert, \"fm_disabled\");\r\n            this.toolsElements.insert.style.pointerEvents = 'auto';\r\n        }\r\n        else {\r\n            this.toolsState.insert = false;\r\n            this.toolsElements.insert.classList.add(\"fm_disabled\");\r\n            this.FileManagerStyles.fmAddClass(this.toolsElements.insert, \"fm_disabled\");\r\n            this.toolsElements.insert.style.pointerEvents = 'none';\r\n        }\r\n    }\r\n    clearCurrentFile() {\r\n        if (this.currentFile) {\r\n            this.currentFile.classList.remove(\"fm_openedFile\");\r\n            this.FileManagerStyles.fmRemoveClass(this.currentFile, \"fm_openedFile\");\r\n        }\r\n        this.currentFile = null;\r\n        this.currentFilePath = '/';\r\n        this.updateRemove();\r\n        this.updateRename();\r\n        this.updateDuplicate();\r\n        this.updateCut();\r\n    }\r\n    handleFilemanagerClick(event) {\r\n        if (event.target instanceof HTMLElement && !event.target.closest(\".fm_file_block\")) {\r\n            this.clearCurrentFile();\r\n        }\r\n    }\r\n    handleRemoveClick(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            event.stopPropagation();\r\n            let result = window.confirm(\"Are you sure you want to delete?\");\r\n            if (this.currentFilePath !== \"/\" && result) {\r\n                try {\r\n                    yield this.FileManagerServer.removeFileOrFolder(this.currentPath + \"/\" + this.currentFilePath);\r\n                    if (this.currentFolder instanceof HTMLElement) {\r\n                        yield this.updateNavFolders();\r\n                        this.updateFileList(this.currentFolder, true);\r\n                    }\r\n                    else {\r\n                        throw new Error('The hierarchy of elements was violated');\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    throw error;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleRenameClick(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var _a;\r\n            event.stopPropagation();\r\n            if (this.currentFile instanceof HTMLElement) {\r\n                const originalTextElem = (_a = this.currentFile) === null || _a === void 0 ? void 0 : _a.querySelector(\".fm_file_name\");\r\n                if (originalTextElem instanceof HTMLElement && originalTextElem.textContent) {\r\n                    // debugger;\r\n                    const inputElement = document.createElement('input');\r\n                    // inputElement.type = 'text';\r\n                    inputElement.value = originalTextElem.textContent;\r\n                    inputElement.classList.add(\"fm_file_name\");\r\n                    inputElement.style.height = \"80%\";\r\n                    inputElement.style.width = \"80%\";\r\n                    inputElement.style.resize = \"None\";\r\n                    if (this.filesDisplayMode === \"tiles\") {\r\n                        this.FileManagerStyles.fmAddClass(inputElement, \"fm_file_name_tiles\");\r\n                    }\r\n                    else {\r\n                        this.FileManagerStyles.fmAddClass(inputElement, \"fm_file_name\");\r\n                    }\r\n                    this.currentFile.replaceChild(inputElement, originalTextElem);\r\n                    inputElement.focus();\r\n                    let bufferThis = this;\r\n                    inputElement.addEventListener('blur', function () {\r\n                        return __awaiter(this, void 0, void 0, function* () {\r\n                            const newTextElement = document.createElement('span');\r\n                            newTextElement.textContent = inputElement.value;\r\n                            newTextElement.classList.add(\"fm_file_name\");\r\n                            newTextElement.classList.add(\"fm_file_metadata\");\r\n                            bufferThis.FileManagerStyles.fmAddClass(newTextElement, \"fm_file_metadata\");\r\n                            if (bufferThis.filesDisplayMode === \"tiles\") {\r\n                                bufferThis.FileManagerStyles.fmAddClass(newTextElement, \"fm_file_name_tiles\");\r\n                            }\r\n                            else {\r\n                                bufferThis.FileManagerStyles.fmAddClass(newTextElement, \"fm_file_name\");\r\n                            }\r\n                            if (bufferThis.currentFile instanceof HTMLElement) {\r\n                                bufferThis.currentFile.replaceChild(newTextElement, inputElement);\r\n                                if (originalTextElem.textContent === inputElement.value) {\r\n                                    return;\r\n                                }\r\n                                try {\r\n                                    if (bufferThis.currentPath === \"/\") {\r\n                                        yield bufferThis.FileManagerServer.renameFileOrFolder(`/${bufferThis.currentFilePath}`, `/${newTextElement.textContent}`);\r\n                                    }\r\n                                    else {\r\n                                        yield bufferThis.FileManagerServer.renameFileOrFolder(`${bufferThis.currentPath}/${bufferThis.currentFilePath}`, `${bufferThis.currentPath}/${newTextElement.textContent}`);\r\n                                    }\r\n                                    if (bufferThis.currentFolder instanceof HTMLElement) {\r\n                                        bufferThis.updateFileList(bufferThis.currentFolder, true);\r\n                                    }\r\n                                    else {\r\n                                        throw new Error('The hierarchy of elements was violated');\r\n                                    }\r\n                                }\r\n                                catch (error) {\r\n                                    throw error;\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleDuplicateClick(event) {\r\n        event.stopPropagation();\r\n        if (this.currentFilePath !== '/') {\r\n            if (this.currentPath === \"/\") {\r\n                this.selectedFilePath = `/${this.currentFilePath}`;\r\n            }\r\n            else {\r\n                this.selectedFilePath = `${this.currentPath}/${this.currentFilePath}`;\r\n            }\r\n            this.cutState = false;\r\n            this.duplicateState = true;\r\n            this.updateInsert();\r\n        }\r\n    }\r\n    handleCutClick(event) {\r\n        event.stopPropagation();\r\n        if (this.currentFilePath !== '/') {\r\n            if (this.currentPath === \"/\") {\r\n                this.selectedFilePath = `/${this.currentFilePath}`;\r\n            }\r\n            else {\r\n                this.selectedFilePath = `${this.currentPath}/${this.currentFilePath}`;\r\n            }\r\n            this.duplicateState = false;\r\n            this.cutState = true;\r\n            this.updateInsert();\r\n        }\r\n    }\r\n    handleInsertClick(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            event.stopPropagation();\r\n            if (this.selectedFilePath !== \"/\") {\r\n                if (this.duplicateState) {\r\n                    try {\r\n                        let insert_element_paths = this.selectedFilePath.split('/');\r\n                        let insert_element_name = insert_element_paths[insert_element_paths.length - 1];\r\n                        if (this.currentPath === \"/\") {\r\n                            yield this.FileManagerServer.duplicateFileOrFolder(`${this.selectedFilePath}`, `/${insert_element_name}`);\r\n                        }\r\n                        else {\r\n                            yield this.FileManagerServer.duplicateFileOrFolder(`${this.selectedFilePath}`, `${this.currentPath}/${insert_element_name}`);\r\n                        }\r\n                        if (this.currentFolder instanceof HTMLElement) {\r\n                            yield this.updateNavFolders();\r\n                            this.updateFileList(this.currentFolder, true);\r\n                        }\r\n                        else {\r\n                            throw new Error('The hierarchy of elements was violated');\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        throw error;\r\n                    }\r\n                }\r\n                else if (this.cutState) {\r\n                    try {\r\n                        let insert_element_paths = this.selectedFilePath.split('/');\r\n                        let insert_element_name = insert_element_paths[insert_element_paths.length - 1];\r\n                        if (this.currentPath.includes(this.selectedFilePath)) {\r\n                            return;\r\n                        }\r\n                        if (this.currentPath === \"/\" && this.selectedFilePath === `/${insert_element_name}`) {\r\n                            return;\r\n                        }\r\n                        if (this.selectedFilePath === `${this.currentPath}/${insert_element_name}`) {\r\n                            return;\r\n                        }\r\n                        if (this.currentPath === \"/\") {\r\n                            yield this.FileManagerServer.cutFileOrFolder(`${this.selectedFilePath}`, `/${insert_element_name}`);\r\n                        }\r\n                        else {\r\n                            yield this.FileManagerServer.cutFileOrFolder(`${this.selectedFilePath}`, `${this.currentPath}/${insert_element_name}`);\r\n                        }\r\n                        yield this.FileManagerServer.removeFileOrFolder(`${this.selectedFilePath}`);\r\n                        if (this.currentFolder instanceof HTMLElement) {\r\n                            yield this.updateNavFolders();\r\n                            this.updateFileList(this.currentFolder, true);\r\n                        }\r\n                        else {\r\n                            throw new Error('The hierarchy of elements was violated');\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    handleSettingsClick() {\r\n        if (this.settingsPanel.style.display === \"block\") {\r\n            this.settingsPanel.style.display = \"none\";\r\n            this.mainPanel.style.display = \"flex\";\r\n            this.toolsPanel.style.display = \"flex\";\r\n            this.navigationPanel.style.display = \"flex\";\r\n        }\r\n        else {\r\n            this.settingsPanel.style.display = \"block\";\r\n            this.mainPanel.style.display = \"none\";\r\n            this.toolsPanel.style.display = \"none\";\r\n            this.navigationPanel.style.display = \"none\";\r\n        }\r\n    }\r\n    handleFileClick(event) {\r\n        if (event.target instanceof HTMLElement) {\r\n            const file_block = event.target.closest(\".fm_file_block\");\r\n            if (file_block instanceof HTMLDivElement) {\r\n                if (this.currentFile) {\r\n                    this.currentFile.classList.remove(\"fm_openedFile\");\r\n                    this.FileManagerStyles.fmRemoveClass(this.currentFile, \"fm_openedFile\");\r\n                }\r\n                this.FileManagerStyles.fmAddClass(file_block, \"fm_openedFile\");\r\n                file_block.classList.add(\"fm_openedFile\");\r\n                this.currentFile = file_block;\r\n                const file_name = file_block.querySelector(\".fm_file_name\");\r\n                if (file_name instanceof HTMLElement && file_name.textContent) {\r\n                    this.currentFilePath = file_name.textContent;\r\n                }\r\n                this.updateRemove();\r\n                this.updateRename();\r\n                this.updateDuplicate();\r\n                this.updateCut();\r\n            }\r\n        }\r\n    }\r\n    getInternalFolders(folder_children, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let folders;\r\n            try {\r\n                folders = yield this.FileManagerServer.getFolders(path);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n            if (folders != null) {\r\n                folders.forEach(folder => {\r\n                    var _a, _b;\r\n                    let newfolder = this.createHTMLNavFolder(folder, folder_children);\r\n                    if (newfolder) {\r\n                        (_a = newfolder[0]) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", this.handleOpenNavFolder.bind(this));\r\n                        (_b = newfolder[1]) === null || _b === void 0 ? void 0 : _b.addEventListener(\"click\", this.handleShowFileList.bind(this));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    startLoading() {\r\n        this.loaderElem.style.display = \"flex\";\r\n        this.filesTilesElement.style.display = \"none\";\r\n        this.files_listHTML.style.display = \"none\";\r\n        this.files_metadataHTML.style.display = \"none\";\r\n    }\r\n    endLoading() {\r\n        this.loaderElem.style.display = \"none\";\r\n        if (this.filesDisplayMode === \"list\") {\r\n            this.files_listHTML.style.display = \"block\";\r\n            this.files_metadataHTML.style.display = \"flex\";\r\n        }\r\n        else if (this.filesDisplayMode === \"tiles\") {\r\n            this.filesTilesElement.style.display = \"flex\";\r\n        }\r\n    }\r\n    getInternalFiles(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let files;\r\n            this.startLoading();\r\n            try {\r\n                files = yield this.FileManagerServer.getFiles(path);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n            this.endLoading();\r\n            if (files != null && this.files_listHTML) {\r\n                if (this.filesDisplayMode === \"list\") {\r\n                    this.files_listHTML.innerHTML = \"\";\r\n                    files.forEach(file => {\r\n                        let file_block = this.createHTMLFileList(file);\r\n                        if (file.isFolder) {\r\n                            file_block.addEventListener(\"dblclick\", this.handleOpenFileListFolder.bind(this));\r\n                        }\r\n                    });\r\n                }\r\n                else if (this.filesDisplayMode === \"tiles\") {\r\n                    this.filesTilesElement.innerHTML = \"\";\r\n                    files.forEach(file => {\r\n                        let file_block = this.createHTMLFileTiles(file);\r\n                        if (file.isFolder) {\r\n                            file_block.addEventListener(\"dblclick\", this.handleOpenFileListFolder.bind(this));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    updateSettingsColorInputs() {\r\n        for (let key in this.settingsColorInput) {\r\n            this.settingsColorInput[key].value = this.FileManagerStyles.fileManagerMutableStyles.colors[key];\r\n        }\r\n    }\r\n    initInterface() {\r\n        // Creating filemanager_navigation\r\n        let filemanager_super_root = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(filemanager_super_root, \"fm_super_root\");\r\n        filemanager_super_root.classList.add(\"fm_super_root\");\r\n        this.FileManagerStyles.updatableElements[\"fm_super_root\"] = [filemanager_super_root];\r\n        let filemanager_navigationHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(filemanager_navigationHTML, \"fm_filemanager_navigation\");\r\n        filemanager_navigationHTML.classList.add(\"fm_filemanager_navigation\");\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_navigation\"] = [filemanager_navigationHTML];\r\n        let arrows_blockHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(arrows_blockHTML, \"fm_arrows_block\");\r\n        arrows_blockHTML.classList.add(\"fm_arrows_block\");\r\n        this.FileManagerStyles.updatableElements[\"fm_arrows_block\"] = [arrows_blockHTML];\r\n        let current_pathHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(current_pathHTML, \"fm_current_path\");\r\n        current_pathHTML.classList.add(\"fm_current_path\");\r\n        this.FileManagerStyles.updatableElements[\"fm_current_path\"] = [current_pathHTML];\r\n        let searchHTML = document.createElement(\"input\");\r\n        searchHTML.type = \"text\";\r\n        searchHTML.placeholder = \"Searching\";\r\n        this.FileManagerStyles.fmAddClass(searchHTML, \"fm_search\");\r\n        searchHTML.classList.add(\"fm_search\");\r\n        this.FileManagerStyles.updatableElements[\"fm_search\"] = [searchHTML];\r\n        let arrow_backHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(arrow_backHTML, \"fm_arrow_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(arrow_backHTML, \"fm_arrow_back\");\r\n        arrow_backHTML.classList.add(\"fm_arrow_wrapper\");\r\n        arrow_backHTML.classList.add(\"fm_arrow_back\");\r\n        arrow_backHTML.addEventListener('click', this.handleBackArrowClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_arrow_wrapper\"] = [arrow_backHTML];\r\n        let arrow_upHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(arrow_upHTML, \"fm_arrow_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(arrow_upHTML, \"fm_arrow_up\");\r\n        this.FileManagerStyles.fmAddClass(arrow_upHTML, \"fm_disabled\");\r\n        arrow_upHTML.classList.add(\"fm_arrow_wrapper\");\r\n        arrow_upHTML.classList.add(\"fm_arrow_up\");\r\n        arrow_upHTML.classList.add(\"fm_disabled\");\r\n        arrow_upHTML.style.pointerEvents = 'none';\r\n        arrow_upHTML.addEventListener('click', this.handleUpArrowClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_arrow_wrapper\"].push(arrow_upHTML);\r\n        let arrow_refreshHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(arrow_refreshHTML, \"fm_arrow_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(arrow_refreshHTML, \"fm_arrow_refresh\");\r\n        arrow_refreshHTML.classList.add(\"fm_arrow_wrapper\");\r\n        arrow_refreshHTML.classList.add(\"fm_arrow_refresh\");\r\n        arrow_refreshHTML.addEventListener('click', this.handleRefreshClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_arrow_wrapper\"].push(arrow_refreshHTML);\r\n        let arrow_backIMG = document.createElement(\"img\");\r\n        this.FileManagerStyles.fmAddClass(arrow_backIMG, \"fm_filemanager_arrow\");\r\n        arrow_backIMG.classList.add(\"fm_filemanager_arrow\");\r\n        arrow_backIMG.src = \"/icons/next-left.png\";\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_arrow\"] = [arrow_backIMG];\r\n        let arrow_upIMG = document.createElement(\"img\");\r\n        this.FileManagerStyles.fmAddClass(arrow_upIMG, \"fm_filemanager_arrow\");\r\n        arrow_upIMG.classList.add(\"fm_filemanager_arrow\");\r\n        arrow_upIMG.src = \"/icons/next-upper.png\";\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_arrow\"].push(arrow_upIMG);\r\n        let arrow_refreshIMG = document.createElement(\"img\");\r\n        this.FileManagerStyles.fmAddClass(arrow_refreshIMG, \"fm_filemanager_arrow\");\r\n        arrow_refreshIMG.classList.add(\"fm_filemanager_arrow\");\r\n        arrow_refreshIMG.src = \"/icons/refresh.png\";\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_arrow\"].push(arrow_refreshIMG);\r\n        arrow_backHTML.append(arrow_backIMG);\r\n        arrow_upHTML.append(arrow_upIMG);\r\n        arrow_refreshHTML.append(arrow_refreshIMG);\r\n        arrows_blockHTML.append(arrow_backHTML);\r\n        arrows_blockHTML.append(arrow_upHTML);\r\n        arrows_blockHTML.append(arrow_refreshHTML);\r\n        let path_folderHTML = document.createElement(\"span\");\r\n        this.FileManagerStyles.fmAddClass(path_folderHTML, \"fm_path_folder\");\r\n        path_folderHTML.classList.add(\"fm_path_folder\");\r\n        this.FileManagerStyles.updatableElements[\"fm_path_folder\"] = [path_folderHTML];\r\n        path_folderHTML.textContent = this.rootFolderName;\r\n        current_pathHTML.append(path_folderHTML);\r\n        filemanager_navigationHTML.append(arrows_blockHTML);\r\n        filemanager_navigationHTML.append(current_pathHTML);\r\n        filemanager_navigationHTML.append(searchHTML);\r\n        filemanager_super_root.append(filemanager_navigationHTML);\r\n        let filemanager_mainHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(filemanager_mainHTML, \"fm_filemanager_main\");\r\n        filemanager_mainHTML.classList.add(\"fm_filemanager_main\");\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_main\"] = [filemanager_mainHTML];\r\n        // Creating filemanager_tools\r\n        let filemanager_toolsHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(filemanager_toolsHTML, \"fm_filemanager_tools\");\r\n        filemanager_toolsHTML.classList.add(\"fm_filemanager_tools\");\r\n        this.FileManagerStyles.updatableElements[\"fm_filemanager_tools\"] = [filemanager_toolsHTML];\r\n        filemanager_toolsHTML.style.position = \"relative\";\r\n        let add_file_buttonHTML = document.createElement(\"button\");\r\n        add_file_buttonHTML.type = \"button\";\r\n        this.FileManagerStyles.fmAddClass(add_file_buttonHTML, \"fm_add_file_button\");\r\n        add_file_buttonHTML.classList.add(\"fm_add_file_button\");\r\n        this.FileManagerStyles.updatableElements[\"fm_add_file_button\"] = [add_file_buttonHTML];\r\n        add_file_buttonHTML.addEventListener(\"click\", this.handleUploadClick.bind(this));\r\n        let add_file_iconHTML = document.createElement(\"img\");\r\n        add_file_iconHTML.src = \"icons/sticky-notes.png\";\r\n        this.FileManagerStyles.fmAddClass(add_file_iconHTML, \"fm_add_file_icon\");\r\n        add_file_iconHTML.classList.add(\"fm_add_file_icon\");\r\n        add_file_buttonHTML.append(add_file_iconHTML);\r\n        this.FileManagerStyles.updatableElements[\"fm_add_file_icon\"] = [add_file_iconHTML];\r\n        let add_file_spanHTML = document.createElement(\"span\");\r\n        add_file_spanHTML.textContent = \"Upload\";\r\n        add_file_buttonHTML.append(add_file_spanHTML);\r\n        let upload_files_blockHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(upload_files_blockHTML, \"fm_upload_files_block\");\r\n        this.FileManagerStyles.fmAddClass(upload_files_blockHTML, \"fm_hidden\");\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_block\"] = [upload_files_blockHTML];\r\n        upload_files_blockHTML.classList.add(\"fm_upload_files_block\");\r\n        upload_files_blockHTML.classList.add(\"fm_hidden\");\r\n        let upload_files_wrapperHTML1 = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(upload_files_wrapperHTML1, \"fm_upload_files_func_wrapper\");\r\n        upload_files_wrapperHTML1.classList.add(\"fm_upload_files_func_wrapper\");\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_wrapper\"] = [upload_files_wrapperHTML1];\r\n        let upload_file_imgHTML = document.createElement(\"img\");\r\n        upload_file_imgHTML.src = \"icons/add_file.png\";\r\n        this.FileManagerStyles.fmAddClass(upload_file_imgHTML, \"fm_upload_files_func_icon\");\r\n        this.FileManagerStyles.fmAddClass(upload_file_imgHTML, \"fm_upload_file\");\r\n        upload_file_imgHTML.classList.add(\"fm_upload_files_func_icon\");\r\n        upload_file_imgHTML.classList.add(\"fm_upload_file\");\r\n        upload_files_wrapperHTML1.append(upload_file_imgHTML);\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_icon\"] = [upload_file_imgHTML];\r\n        let upload_file_spanHTML = document.createElement(\"span\");\r\n        upload_file_spanHTML.textContent = \"Upload file\";\r\n        this.FileManagerStyles.fmAddClass(upload_file_spanHTML, \"fm_upload_files_func_name\");\r\n        upload_file_spanHTML.classList.add(\"fm_upload_files_func_name\");\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_name\"] = [upload_file_spanHTML];\r\n        upload_files_wrapperHTML1.append(upload_file_spanHTML);\r\n        let upload_file_inputHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(upload_file_inputHTML, \"fm_upload_file_func_input\");\r\n        upload_file_inputHTML.classList.add(\"fm_upload_file_func_input\");\r\n        upload_file_inputHTML.type = \"file\";\r\n        // upload_file_inputHTML.name = \"upload_file\"\r\n        // upload_file_inputHTML.id = \"upload_file\"\r\n        upload_file_inputHTML.addEventListener(\"change\", this.handleUploadingFile.bind(this));\r\n        upload_files_wrapperHTML1.append(upload_file_inputHTML);\r\n        let upload_files_wrapperHTML2 = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(upload_files_wrapperHTML2, \"fm_upload_files_func_wrapper\");\r\n        upload_files_wrapperHTML2.classList.add(\"fm_upload_files_func_wrapper\");\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_wrapper\"].push(upload_files_wrapperHTML2);\r\n        let upload_file_imgHTML2 = document.createElement(\"img\");\r\n        upload_file_imgHTML2.src = \"icons/add_folder.png\";\r\n        this.FileManagerStyles.fmAddClass(upload_file_imgHTML2, \"fm_upload_files_func_icon\");\r\n        this.FileManagerStyles.fmAddClass(upload_file_imgHTML2, \"fm_upload_folder\");\r\n        upload_file_imgHTML2.classList.add(\"fm_upload_files_func_icon\");\r\n        upload_file_imgHTML2.classList.add(\"fm_upload_folder\");\r\n        upload_files_wrapperHTML2.append(upload_file_imgHTML2);\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_icon\"].push(upload_file_imgHTML2);\r\n        let upload_file_spanHTML2 = document.createElement(\"span\");\r\n        upload_file_spanHTML2.textContent = \"Upload folder\";\r\n        this.FileManagerStyles.fmAddClass(upload_file_spanHTML2, \"fm_upload_files_func_name\");\r\n        upload_file_spanHTML2.classList.add(\"fm_upload_files_func_name\");\r\n        upload_files_wrapperHTML2.append(upload_file_spanHTML2);\r\n        this.FileManagerStyles.updatableElements[\"fm_upload_files_func_name\"].push(upload_file_spanHTML2);\r\n        let upload_file_inputHTML2 = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(upload_file_inputHTML2, \"fm_upload_files_func_input\");\r\n        upload_file_inputHTML2.classList.add(\"fm_upload_files_func_input\");\r\n        upload_file_inputHTML2.type = \"file\";\r\n        upload_file_inputHTML2.setAttribute(\"webkitdirectory\", '');\r\n        upload_file_inputHTML2.setAttribute(\"directory\", '');\r\n        upload_file_inputHTML2.setAttribute(\"multiple\", '');\r\n        upload_file_inputHTML2.addEventListener(\"change\", this.handleUploadingFolder.bind(this));\r\n        upload_files_wrapperHTML2.append(upload_file_inputHTML2);\r\n        upload_files_blockHTML.append(upload_files_wrapperHTML1);\r\n        upload_files_blockHTML.append(upload_files_wrapperHTML2);\r\n        filemanager_toolsHTML.append(upload_files_blockHTML);\r\n        let cutHTML = document.createElement(\"img\");\r\n        cutHTML.src = \"icons/cut2.png\";\r\n        this.FileManagerStyles.fmAddClass(cutHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(cutHTML, \"fm_cut\");\r\n        cutHTML.classList.add(\"fm_tool\");\r\n        cutHTML.classList.add(\"fm_cut\");\r\n        cutHTML.addEventListener(\"click\", this.handleCutClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"] = [cutHTML];\r\n        let duplicateHTML = document.createElement(\"img\");\r\n        duplicateHTML.src = \"icons/duplicate.png\";\r\n        this.FileManagerStyles.fmAddClass(duplicateHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(duplicateHTML, \"fm_duplicate\");\r\n        duplicateHTML.classList.add(\"fm_tool\");\r\n        duplicateHTML.classList.add(\"fm_duplicate\");\r\n        duplicateHTML.addEventListener('click', this.handleDuplicateClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(duplicateHTML);\r\n        let insertHTML = document.createElement(\"img\");\r\n        insertHTML.src = \"icons/insert.png\";\r\n        this.FileManagerStyles.fmAddClass(insertHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(insertHTML, \"fm_insert\");\r\n        insertHTML.classList.add(\"fm_tool\");\r\n        insertHTML.classList.add(\"fm_insert\");\r\n        insertHTML.addEventListener('click', this.handleInsertClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(insertHTML);\r\n        let renameHTML = document.createElement(\"img\");\r\n        renameHTML.src = \"icons/rename.png\";\r\n        this.FileManagerStyles.fmAddClass(renameHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(renameHTML, \"fm_rename\");\r\n        renameHTML.classList.add(\"fm_tool\");\r\n        renameHTML.classList.add(\"fm_rename\");\r\n        renameHTML.addEventListener(\"click\", this.handleRenameClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(renameHTML);\r\n        let removeHTML = document.createElement(\"img\");\r\n        removeHTML.src = \"icons/remove.png\";\r\n        this.FileManagerStyles.fmAddClass(removeHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(removeHTML, \"fm_remove\");\r\n        removeHTML.classList.add(\"fm_tool\");\r\n        removeHTML.classList.add(\"fm_remove\");\r\n        removeHTML.addEventListener(\"click\", this.handleRemoveClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(removeHTML);\r\n        let grid_wrapperHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(grid_wrapperHTML, \"fm_grid_wrapper\");\r\n        grid_wrapperHTML.classList.add(\"fm_grid_wrapper\");\r\n        let listHTML = document.createElement(\"img\");\r\n        listHTML.src = \"icons/table.png\";\r\n        this.FileManagerStyles.fmAddClass(listHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(listHTML, \"fm_list\");\r\n        listHTML.classList.add(\"fm_tool\");\r\n        listHTML.classList.add(\"fm_list\");\r\n        listHTML.addEventListener(\"click\", this.handleListDisplayModeClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(listHTML);\r\n        let tilesHTML = document.createElement(\"img\");\r\n        tilesHTML.src = \"icons/grid.png\";\r\n        this.FileManagerStyles.fmAddClass(tilesHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(tilesHTML, \"fm_tiles\");\r\n        tilesHTML.classList.add(\"fm_tool\");\r\n        tilesHTML.classList.add(\"fm_tiles\");\r\n        tilesHTML.addEventListener(\"click\", this.handleTilesDisplayModeClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(tilesHTML);\r\n        grid_wrapperHTML.append(listHTML);\r\n        grid_wrapperHTML.append(tilesHTML);\r\n        let settingsHTML = document.createElement(\"img\");\r\n        settingsHTML.src = \"icons/gear.png\";\r\n        this.FileManagerStyles.fmAddClass(settingsHTML, \"fm_tool\");\r\n        this.FileManagerStyles.fmAddClass(settingsHTML, \"fm_settings\");\r\n        settingsHTML.classList.add(\"fm_tool\");\r\n        settingsHTML.classList.add(\"fm_settings\");\r\n        settingsHTML.addEventListener(\"click\", this.handleSettingsClick.bind(this));\r\n        this.FileManagerStyles.updatableElements[\"fm_tool\"].push(settingsHTML);\r\n        filemanager_toolsHTML.append(add_file_buttonHTML);\r\n        filemanager_toolsHTML.append(cutHTML);\r\n        filemanager_toolsHTML.append(duplicateHTML);\r\n        filemanager_toolsHTML.append(insertHTML);\r\n        filemanager_toolsHTML.append(renameHTML);\r\n        filemanager_toolsHTML.append(removeHTML);\r\n        filemanager_toolsHTML.append(grid_wrapperHTML);\r\n        filemanager_toolsHTML.append(settingsHTML);\r\n        filemanager_super_root.append(filemanager_toolsHTML);\r\n        // Creating folders_nav\r\n        let folders_navHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(folders_navHTML, \"fm_folders_nav\");\r\n        folders_navHTML.classList.add(\"fm_folders_nav\");\r\n        this.FileManagerStyles.updatableElements[\"fm_folders_nav\"] = [folders_navHTML];\r\n        let rootfolder = this.createHTMLNavFolder({ name: this.rootFolderName }, folders_navHTML, true);\r\n        if (rootfolder) {\r\n            let rootfolder_icon_wrapper = rootfolder[0];\r\n            let rootfolder_parent = rootfolder[1];\r\n            let rootfolder_wrapper = rootfolder[2];\r\n            if (rootfolder_wrapper) {\r\n                this.FileManagerStyles.fmAddClass(rootfolder_wrapper, \"fm_folder_root_wrapper\");\r\n                rootfolder_wrapper.classList.add(\"fm_folder_root_wrapper\");\r\n                this.FileManagerStyles.updatableElements[\"fm_folder_root_wrapper\"] = [rootfolder_wrapper];\r\n            }\r\n            rootfolder_icon_wrapper === null || rootfolder_icon_wrapper === void 0 ? void 0 : rootfolder_icon_wrapper.addEventListener(\"click\", this.handleOpenNavFolder.bind(this));\r\n            rootfolder_parent === null || rootfolder_parent === void 0 ? void 0 : rootfolder_parent.addEventListener(\"click\", this.handleShowFileList.bind(this));\r\n        }\r\n        filemanager_mainHTML.append(folders_navHTML);\r\n        // Creating files_panel\r\n        let files_panelHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(files_panelHTML, \"fm_files_panel\");\r\n        files_panelHTML.classList.add(\"fm_files_panel\");\r\n        this.FileManagerStyles.updatableElements[\"fm_files_panel\"] = [files_panelHTML];\r\n        let files_tilesHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(files_tilesHTML, \"fm_files_tiles\");\r\n        files_tilesHTML.classList.add(\"fm_files_tiles\");\r\n        this.FileManagerStyles.updatableElements[\"fm_files_tiles\"] = [files_tilesHTML];\r\n        if (this.filesDisplayMode === \"tiles\") {\r\n            files_tilesHTML.style.display = \"flex\";\r\n        }\r\n        else {\r\n            files_tilesHTML.style.display = \"none\";\r\n        }\r\n        let metadata_blockHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(metadata_blockHTML, \"fm_metadata_block\");\r\n        metadata_blockHTML.classList.add(\"fm_metadata_block\");\r\n        this.FileManagerStyles.updatableElements[\"fm_metadata_block\"] = [metadata_blockHTML];\r\n        if (this.filesDisplayMode === \"tiles\") {\r\n            metadata_blockHTML.style.display = \"none\";\r\n        }\r\n        else {\r\n            metadata_blockHTML.style.display = \"flex\";\r\n        }\r\n        let files_listHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(files_listHTML, \"fm_files_list\");\r\n        files_listHTML.classList.add(\"fm_files_list\");\r\n        this.FileManagerStyles.updatableElements[\"fm_files_list\"] = [files_listHTML];\r\n        if (this.filesDisplayMode === \"list\") {\r\n            files_listHTML.style.display = \"block\";\r\n        }\r\n        else {\r\n            files_listHTML.style.display = \"none\";\r\n        }\r\n        let metadata_nameHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(metadata_nameHTML, \"fm_metadata_name\");\r\n        this.FileManagerStyles.fmAddClass(metadata_nameHTML, \"fm_metadata\");\r\n        metadata_nameHTML.classList.add(\"fm_metadata_name\");\r\n        metadata_nameHTML.classList.add(\"fm_metadata\");\r\n        metadata_nameHTML.textContent = \"Name\";\r\n        this.FileManagerStyles.updatableElements[\"fm_metadata\"] = [metadata_nameHTML];\r\n        let metadata_changedateHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(metadata_changedateHTML, \"fm_metadata_changedate\");\r\n        this.FileManagerStyles.fmAddClass(metadata_changedateHTML, \"fm_metadata\");\r\n        metadata_changedateHTML.classList.add(\"fm_metadata_changedate\");\r\n        metadata_changedateHTML.classList.add(\"fm_metadata\");\r\n        metadata_changedateHTML.textContent = \"Date of change\";\r\n        this.FileManagerStyles.updatableElements[\"fm_metadata\"].push(metadata_changedateHTML);\r\n        let metadata_typeHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(metadata_typeHTML, \"fm_metadata_type\");\r\n        this.FileManagerStyles.fmAddClass(metadata_typeHTML, \"fm_metadata\");\r\n        metadata_typeHTML.classList.add(\"fm_metadata_type\");\r\n        metadata_typeHTML.classList.add(\"fm_metadata\");\r\n        metadata_typeHTML.textContent = \"Type\";\r\n        this.FileManagerStyles.updatableElements[\"fm_metadata\"].push(metadata_typeHTML);\r\n        let metadata_sizeHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(metadata_sizeHTML, \"fm_metadata_size\");\r\n        this.FileManagerStyles.fmAddClass(metadata_sizeHTML, \"fm_metadata\");\r\n        metadata_sizeHTML.classList.add(\"fm_metadata_size\");\r\n        metadata_sizeHTML.classList.add(\"fm_metadata\");\r\n        metadata_sizeHTML.textContent = \"Size\";\r\n        this.FileManagerStyles.updatableElements[\"fm_metadata\"].push(metadata_sizeHTML);\r\n        metadata_blockHTML.append(metadata_nameHTML);\r\n        metadata_blockHTML.append(metadata_changedateHTML);\r\n        metadata_blockHTML.append(metadata_typeHTML);\r\n        metadata_blockHTML.append(metadata_sizeHTML);\r\n        let loaderWrapperHTML = document.createElement(\"div\");\r\n        loaderWrapperHTML.classList.add(\"fm_loader_wrapper\");\r\n        this.FileManagerStyles.fmAddClass(loaderWrapperHTML, \"fm_loader_wrapper\");\r\n        loaderWrapperHTML.style.display = \"none\";\r\n        let loaderHTML = document.createElement(\"span\");\r\n        loaderHTML.classList.add(\"fm_loader\");\r\n        this.FileManagerStyles.fmAddClass(loaderHTML, \"fm_loader\");\r\n        this.FileManagerStyles.addRotationAnimation(loaderHTML);\r\n        loaderWrapperHTML.append(loaderHTML);\r\n        this.FileManagerStyles.updatableElements[\"fm_loader\"] = [loaderHTML];\r\n        files_panelHTML.append(metadata_blockHTML);\r\n        files_panelHTML.append(files_listHTML);\r\n        files_panelHTML.append(files_tilesHTML);\r\n        files_panelHTML.append(loaderWrapperHTML);\r\n        filemanager_mainHTML.append(files_panelHTML);\r\n        filemanager_super_root.append(filemanager_mainHTML);\r\n        // Creating settings panel\r\n        let settings_panelHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(settings_panelHTML, \"fm_settings_panel\");\r\n        settings_panelHTML.classList.add(\"fm_settings_panel\");\r\n        this.FileManagerStyles.updatableElements[\"fm_settings_panel\"] = [settings_panelHTML];\r\n        settings_panelHTML.style.display = \"none\";\r\n        let title_blockHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(title_blockHTML, \"fm_title_block\");\r\n        title_blockHTML.classList.add(\"fm_title_block\");\r\n        this.FileManagerStyles.updatableElements[\"fm_title_block\"] = [title_blockHTML];\r\n        title_blockHTML.textContent = \"Settings\";\r\n        let leave_settings_arrowHTML = document.createElement(\"img\");\r\n        this.FileManagerStyles.fmAddClass(leave_settings_arrowHTML, \"fm_leave_settings_arrow\");\r\n        leave_settings_arrowHTML.classList.add(\"fm_leave_settings_arrow\");\r\n        leave_settings_arrowHTML.style.margin = \"0px\";\r\n        leave_settings_arrowHTML.src = \"icons/next-left.png\";\r\n        leave_settings_arrowHTML.addEventListener(\"click\", this.handleSettingsClick.bind(this));\r\n        title_blockHTML.append(leave_settings_arrowHTML);\r\n        let settingsFormHTML = document.createElement(\"form\");\r\n        this.FileManagerStyles.fmAddClass(settingsFormHTML, \"fm_settings_form\");\r\n        settingsFormHTML.classList.add(\"fm_settings_form\");\r\n        settingsFormHTML.name = \"fm_settings_form\";\r\n        settingsFormHTML.addEventListener(\"submit\", this.handleSubmitSettings.bind(this));\r\n        let params_panelHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(params_panelHTML, \"fm_params_panel\");\r\n        params_panelHTML.classList.add(\"fm_params_panel\");\r\n        let hover_colorHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(hover_colorHTML, \"fm_color_input\");\r\n        hover_colorHTML.classList.add(\"fm_color_input\");\r\n        hover_colorHTML.type = \"color\";\r\n        hover_colorHTML.name = \"hover_color\";\r\n        hover_colorHTML.value = this.FileManagerStyles.fileManagerMutableStyles.colors.hover;\r\n        this.settingsColorInput[\"hover\"] = hover_colorHTML;\r\n        let hover_color_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(hover_color_labelHTML, \"fm_color_label\");\r\n        hover_color_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"] = [hover_color_labelHTML];\r\n        hover_color_labelHTML.innerHTML = \"Hover color:<br>\";\r\n        hover_color_labelHTML.append(hover_colorHTML);\r\n        let background_colorHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(background_colorHTML, \"fm_color_input\");\r\n        background_colorHTML.classList.add(\"fm_color_input\");\r\n        background_colorHTML.type = \"color\";\r\n        background_colorHTML.name = \"background_color\";\r\n        background_colorHTML.value = this.FileManagerStyles.fileManagerMutableStyles.colors.main_background;\r\n        this.settingsColorInput[\"main_background\"] = background_colorHTML;\r\n        let background_color_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(background_color_labelHTML, \"fm_color_label\");\r\n        background_color_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(background_color_labelHTML);\r\n        background_color_labelHTML.innerHTML = \"Background color:<br>\";\r\n        background_color_labelHTML.append(background_colorHTML);\r\n        let border_colorHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(border_colorHTML, \"fm_color_input\");\r\n        border_colorHTML.classList.add(\"fm_color_input\");\r\n        border_colorHTML.type = \"color\";\r\n        border_colorHTML.name = \"border_color\";\r\n        border_colorHTML.value = this.FileManagerStyles.fileManagerMutableStyles.colors.border;\r\n        this.settingsColorInput[\"border\"] = border_colorHTML;\r\n        let border_color_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(border_color_labelHTML, \"fm_color_label\");\r\n        border_color_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(border_color_labelHTML);\r\n        border_color_labelHTML.innerHTML = \"Border color:<br>\";\r\n        border_color_labelHTML.append(border_colorHTML);\r\n        let select_colorHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(select_colorHTML, \"fm_color_input\");\r\n        select_colorHTML.classList.add(\"fm_color_input\");\r\n        select_colorHTML.type = \"color\";\r\n        select_colorHTML.name = \"select_color\";\r\n        select_colorHTML.value = this.FileManagerStyles.fileManagerMutableStyles.colors.selected;\r\n        this.settingsColorInput[\"selected\"] = select_colorHTML;\r\n        let select_color_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(select_color_labelHTML, \"fm_color_label\");\r\n        select_color_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(select_color_labelHTML);\r\n        select_color_labelHTML.innerHTML = \"Select color:<br>\";\r\n        select_color_labelHTML.append(select_colorHTML);\r\n        let text_colorHTML = document.createElement(\"input\");\r\n        this.FileManagerStyles.fmAddClass(text_colorHTML, \"fm_color_input\");\r\n        text_colorHTML.classList.add(\"fm_color_input\");\r\n        text_colorHTML.type = \"color\";\r\n        text_colorHTML.name = \"text_color\";\r\n        text_colorHTML.value = this.FileManagerStyles.fileManagerMutableStyles.colors.text_color;\r\n        this.settingsColorInput[\"text_color\"] = text_colorHTML;\r\n        let text_color_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(text_color_labelHTML, \"fm_color_label\");\r\n        text_color_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(text_color_labelHTML);\r\n        text_color_labelHTML.innerHTML = \"Text color:<br>\";\r\n        text_color_labelHTML.append(text_colorHTML);\r\n        let navigation_sizeHTML = document.createElement(\"select\");\r\n        this.FileManagerStyles.fmAddClass(navigation_sizeHTML, \"fm_select_input\");\r\n        navigation_sizeHTML.classList.add(\"fm_select_input\");\r\n        navigation_sizeHTML.name = \"navigation\";\r\n        let navigation_xsmall_sizeHTML = document.createElement(\"option\");\r\n        navigation_xsmall_sizeHTML.value = \"xsmall\";\r\n        navigation_xsmall_sizeHTML.textContent = \"xsmall\";\r\n        navigation_xsmall_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.navigation === \"xsmall\";\r\n        let navigation_small_sizeHTML = document.createElement(\"option\");\r\n        navigation_small_sizeHTML.value = \"small\";\r\n        navigation_small_sizeHTML.textContent = \"small\";\r\n        navigation_small_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.navigation === \"small\";\r\n        let navigation_medium_sizeHTML = document.createElement(\"option\");\r\n        navigation_medium_sizeHTML.value = \"medium\";\r\n        navigation_medium_sizeHTML.textContent = \"medium\";\r\n        navigation_medium_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.navigation === \"medium\";\r\n        let navigation_large_sizeHTML = document.createElement(\"option\");\r\n        navigation_large_sizeHTML.value = \"large\";\r\n        navigation_large_sizeHTML.textContent = \"large\";\r\n        navigation_large_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.navigation === \"large\";\r\n        let navigation_xlarge_sizeHTML = document.createElement(\"option\");\r\n        navigation_xlarge_sizeHTML.value = \"xlarge\";\r\n        navigation_xlarge_sizeHTML.textContent = \"xlarge\";\r\n        navigation_xlarge_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.navigation === \"xlarge\";\r\n        navigation_sizeHTML.append(navigation_xsmall_sizeHTML);\r\n        navigation_sizeHTML.append(navigation_small_sizeHTML);\r\n        navigation_sizeHTML.append(navigation_medium_sizeHTML);\r\n        navigation_sizeHTML.append(navigation_large_sizeHTML);\r\n        navigation_sizeHTML.append(navigation_xlarge_sizeHTML);\r\n        let navigation_size_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(navigation_size_labelHTML, \"fm_color_label\");\r\n        navigation_size_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(navigation_size_labelHTML);\r\n        navigation_size_labelHTML.innerHTML = \"Navigation interface:<br>\";\r\n        navigation_size_labelHTML.append(navigation_sizeHTML);\r\n        let tools_sizeHTML = document.createElement(\"select\");\r\n        this.FileManagerStyles.fmAddClass(tools_sizeHTML, \"fm_select_input\");\r\n        tools_sizeHTML.classList.add(\"fm_select_input\");\r\n        tools_sizeHTML.name = \"tools\";\r\n        let tools_xsmall_sizeHTML = document.createElement(\"option\");\r\n        tools_xsmall_sizeHTML.value = \"xsmall\";\r\n        tools_xsmall_sizeHTML.textContent = \"xsmall\";\r\n        tools_xsmall_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.tools === \"xsmall\";\r\n        let tools_small_sizeHTML = document.createElement(\"option\");\r\n        tools_small_sizeHTML.value = \"small\";\r\n        tools_small_sizeHTML.textContent = \"small\";\r\n        tools_small_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.tools === \"small\";\r\n        let tools_medium_sizeHTML = document.createElement(\"option\");\r\n        tools_medium_sizeHTML.value = \"medium\";\r\n        tools_medium_sizeHTML.textContent = \"medium\";\r\n        tools_medium_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.tools === \"medium\";\r\n        let tools_large_sizeHTML = document.createElement(\"option\");\r\n        tools_large_sizeHTML.value = \"large\";\r\n        tools_large_sizeHTML.textContent = \"large\";\r\n        tools_large_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.tools === \"large\";\r\n        let tools_xlarge_sizeHTML = document.createElement(\"option\");\r\n        tools_xlarge_sizeHTML.value = \"xlarge\";\r\n        tools_xlarge_sizeHTML.textContent = \"xlarge\";\r\n        tools_xlarge_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.tools === \"xlarge\";\r\n        tools_sizeHTML.append(tools_xsmall_sizeHTML);\r\n        tools_sizeHTML.append(tools_small_sizeHTML);\r\n        tools_sizeHTML.append(tools_medium_sizeHTML);\r\n        tools_sizeHTML.append(tools_large_sizeHTML);\r\n        tools_sizeHTML.append(tools_xlarge_sizeHTML);\r\n        let tools_size_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(tools_size_labelHTML, \"fm_color_label\");\r\n        tools_size_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(tools_size_labelHTML);\r\n        tools_size_labelHTML.innerHTML = \"Tools interface:<br>\";\r\n        tools_size_labelHTML.append(tools_sizeHTML);\r\n        let folders_panel_sizeHTML = document.createElement(\"select\");\r\n        this.FileManagerStyles.fmAddClass(folders_panel_sizeHTML, \"fm_select_input\");\r\n        folders_panel_sizeHTML.classList.add(\"fm_select_input\");\r\n        folders_panel_sizeHTML.name = \"folders_panel\";\r\n        let folders_panel_xsmall_sizeHTML = document.createElement(\"option\");\r\n        folders_panel_xsmall_sizeHTML.value = \"xsmall\";\r\n        folders_panel_xsmall_sizeHTML.textContent = \"xsmall\";\r\n        folders_panel_xsmall_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.folders_panel === \"xsmall\";\r\n        let folders_panel_small_sizeHTML = document.createElement(\"option\");\r\n        folders_panel_small_sizeHTML.value = \"small\";\r\n        folders_panel_small_sizeHTML.textContent = \"small\";\r\n        folders_panel_small_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.folders_panel === \"small\";\r\n        let folders_panel_medium_sizeHTML = document.createElement(\"option\");\r\n        folders_panel_medium_sizeHTML.value = \"medium\";\r\n        folders_panel_medium_sizeHTML.textContent = \"medium\";\r\n        folders_panel_medium_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.folders_panel === \"medium\";\r\n        let folders_panel_large_sizeHTML = document.createElement(\"option\");\r\n        folders_panel_large_sizeHTML.value = \"large\";\r\n        folders_panel_large_sizeHTML.textContent = \"large\";\r\n        folders_panel_large_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.folders_panel === \"large\";\r\n        let folders_panel_xlarge_sizeHTML = document.createElement(\"option\");\r\n        folders_panel_xlarge_sizeHTML.value = \"xlarge\";\r\n        folders_panel_xlarge_sizeHTML.textContent = \"xlarge\";\r\n        folders_panel_xlarge_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.folders_panel === \"xlarge\";\r\n        folders_panel_sizeHTML.append(folders_panel_xsmall_sizeHTML);\r\n        folders_panel_sizeHTML.append(folders_panel_small_sizeHTML);\r\n        folders_panel_sizeHTML.append(folders_panel_medium_sizeHTML);\r\n        folders_panel_sizeHTML.append(folders_panel_large_sizeHTML);\r\n        folders_panel_sizeHTML.append(folders_panel_xlarge_sizeHTML);\r\n        let folders_panel_size_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(folders_panel_size_labelHTML, \"fm_color_label\");\r\n        folders_panel_size_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(folders_panel_size_labelHTML);\r\n        folders_panel_size_labelHTML.innerHTML = \"Folders panel interface:<br>\";\r\n        folders_panel_size_labelHTML.append(folders_panel_sizeHTML);\r\n        let files_panel_sizeHTML = document.createElement(\"select\");\r\n        this.FileManagerStyles.fmAddClass(files_panel_sizeHTML, \"fm_select_input\");\r\n        files_panel_sizeHTML.classList.add(\"fm_select_input\");\r\n        files_panel_sizeHTML.name = \"files_panel\";\r\n        let files_panel_xsmall_sizeHTML = document.createElement(\"option\");\r\n        files_panel_xsmall_sizeHTML.value = \"xsmall\";\r\n        files_panel_xsmall_sizeHTML.textContent = \"xsmall\";\r\n        files_panel_xsmall_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.files_panel === \"xsmall\";\r\n        let files_panel_small_sizeHTML = document.createElement(\"option\");\r\n        files_panel_small_sizeHTML.value = \"small\";\r\n        files_panel_small_sizeHTML.textContent = \"small\";\r\n        files_panel_small_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.files_panel === \"small\";\r\n        let files_panel_medium_sizeHTML = document.createElement(\"option\");\r\n        files_panel_medium_sizeHTML.value = \"medium\";\r\n        files_panel_medium_sizeHTML.textContent = \"medium\";\r\n        files_panel_medium_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.files_panel === \"medium\";\r\n        let files_panel_large_sizeHTML = document.createElement(\"option\");\r\n        files_panel_large_sizeHTML.value = \"large\";\r\n        files_panel_large_sizeHTML.textContent = \"large\";\r\n        files_panel_large_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.files_panel === \"large\";\r\n        let files_panel_xlarge_sizeHTML = document.createElement(\"option\");\r\n        files_panel_xlarge_sizeHTML.value = \"xlarge\";\r\n        files_panel_xlarge_sizeHTML.textContent = \"xlarge\";\r\n        files_panel_xlarge_sizeHTML.selected = this.FileManagerStyles.fileManagerMutableStyles.sizing.files_panel === \"xlarge\";\r\n        files_panel_sizeHTML.append(files_panel_xsmall_sizeHTML);\r\n        files_panel_sizeHTML.append(files_panel_small_sizeHTML);\r\n        files_panel_sizeHTML.append(files_panel_medium_sizeHTML);\r\n        files_panel_sizeHTML.append(files_panel_large_sizeHTML);\r\n        files_panel_sizeHTML.append(files_panel_xlarge_sizeHTML);\r\n        let files_panel_size_labelHTML = document.createElement(\"label\");\r\n        this.FileManagerStyles.fmAddClass(files_panel_size_labelHTML, \"fm_color_label\");\r\n        files_panel_size_labelHTML.classList.add(\"fm_color_label\");\r\n        this.FileManagerStyles.updatableElements[\"fm_color_label\"].push(files_panel_size_labelHTML);\r\n        files_panel_size_labelHTML.innerHTML = \"Files panel interface:<br>\";\r\n        files_panel_size_labelHTML.append(files_panel_sizeHTML);\r\n        let buttons_panelHTML = document.createElement(\"div\");\r\n        this.FileManagerStyles.fmAddClass(buttons_panelHTML, \"fm_buttons_panel\");\r\n        buttons_panelHTML.classList.add(\"fm_buttons_panel\");\r\n        let message_submitHTML = document.createElement(\"span\");\r\n        this.FileManagerStyles.fmAddClass(message_submitHTML, \"fm_message_submit\");\r\n        message_submitHTML.classList.add(\"fm_message_submit\");\r\n        message_submitHTML.textContent = \"\";\r\n        let reset_settings_buttonHTML = document.createElement(\"button\");\r\n        this.FileManagerStyles.fmAddClass(reset_settings_buttonHTML, \"fm_reset_settings_button\");\r\n        reset_settings_buttonHTML.classList.add(\"fm_reset_settings_button\");\r\n        reset_settings_buttonHTML.textContent = \"To default\";\r\n        reset_settings_buttonHTML.type = \"button\";\r\n        reset_settings_buttonHTML.addEventListener(\"click\", this.handleResetSettings.bind(this));\r\n        let submit_settings_buttonHTML = document.createElement(\"button\");\r\n        this.FileManagerStyles.fmAddClass(submit_settings_buttonHTML, \"fm_submit_settings_button\");\r\n        submit_settings_buttonHTML.classList.add(\"fm_submit_settings_button\");\r\n        submit_settings_buttonHTML.textContent = \"Submit\";\r\n        submit_settings_buttonHTML.type = \"submit\";\r\n        params_panelHTML.append(hover_color_labelHTML);\r\n        params_panelHTML.append(background_color_labelHTML);\r\n        params_panelHTML.append(border_color_labelHTML);\r\n        params_panelHTML.append(select_color_labelHTML);\r\n        params_panelHTML.append(text_color_labelHTML);\r\n        params_panelHTML.append(navigation_size_labelHTML);\r\n        params_panelHTML.append(tools_size_labelHTML);\r\n        params_panelHTML.append(folders_panel_size_labelHTML);\r\n        params_panelHTML.append(files_panel_size_labelHTML);\r\n        buttons_panelHTML.append(message_submitHTML);\r\n        buttons_panelHTML.append(reset_settings_buttonHTML);\r\n        buttons_panelHTML.append(submit_settings_buttonHTML);\r\n        settingsFormHTML.append(params_panelHTML);\r\n        settingsFormHTML.append(buttons_panelHTML);\r\n        settings_panelHTML.append(title_blockHTML);\r\n        settings_panelHTML.append(settingsFormHTML);\r\n        filemanager_super_root.append(settings_panelHTML);\r\n        this.root.append(filemanager_super_root);\r\n        return filemanager_super_root;\r\n    }\r\n}\n\n//# sourceURL=webpack://Filemanager/./src/filemanager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/filemanager.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});