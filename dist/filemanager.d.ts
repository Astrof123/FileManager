import { IfileManagerStyles } from './filemanager-styles';
export type folder = {
    name: string;
};
export type file = {
    name: string;
    changedate: string;
    isFolder: boolean;
    size: string;
    image: string | null;
    path: string | null;
};
export type icons = {
    addFile: string;
    addFolder: string;
    arrowDownFolder: string;
    arrowRightFolders: string;
    arrowRightNavigation: string;
    cut: string;
    copy: string;
    folder: string;
    settings: string;
    grid: string;
    insert: string;
    arrowBack: string;
    arrowUp: string;
    refresh: string;
    picture: string;
    remove: string;
    rename: string;
    addFilesButton: string;
    list: string;
    textfile: string;
    openedFolder: string;
    download: string;
    createFile: string;
    createFolder: string;
    css: string;
    doc: string;
    docx: string;
    exe: string;
    html: string;
    mp4: string;
    pdf: string;
    php: string;
    ppt: string;
    pptx: string;
    svg: string;
    wav: string;
    xls: string;
    xlsx: string;
    zipFolder: string;
    py: string;
};
export type options = {
    rootFolderName: string;
    icons: icons;
    language: string;
    addressPaneOptions: {
        addressPaneEnabled: boolean;
        searchingEnabled: boolean;
        refreshButtonEnabled: boolean;
        upButtonEnabled: boolean;
        backButtonEnabled: boolean;
    };
    toolsPaneOptions: {
        toolsPaneEnabled: boolean;
        uploadingFilesEnabled: boolean;
        toolsEnabled: {
            deletingFiles: boolean;
            renamingFiles: boolean;
            downloadingFiles: boolean;
            movingFiles: boolean;
            createFiles: boolean;
        };
        defaultFileDisplayMode: "list" | "tiles";
        fileDisplayModesEnabled: boolean;
        settingsOptions: {
            settingsEnabled: boolean;
            colorSettingsEnabled: boolean;
            sizeSettingsEnabled: boolean;
        };
    };
    navigationPaneEnabled: boolean;
};
export declare abstract class FileManagerServer {
    abstract getFolders(path: string): Promise<folder[]>;
    abstract getFiles(path: string): Promise<file[]>;
    abstract uploadFile(file: File, path: string): boolean;
    abstract uploadFolder(files: FileList, path: string): boolean;
    abstract removeFileOrFolder(path: string): boolean;
    abstract renameFileOrFolder(oldPath: string, newPath: string): boolean;
    abstract copyFileOrFolder(oldPath: string, newPath: string): boolean;
    abstract downloadFiles(paths: string[]): boolean;
    abstract searchFiles(searchString: string, path: string): Promise<file[]>;
    abstract createEmptyFile(path: string): boolean;
    abstract createEmptyFolder(path: string): boolean;
}
export declare class FileManager {
    translations: {
        [index: string]: {
            [index: string]: string;
        };
    };
    private currentLang;
    private image_extension;
    private rootFolderName;
    private FileManagerServer;
    private FileManagerStyles;
    private root;
    private filemanager_root;
    private settingsForm;
    private files_listHTML;
    private searchInputElement;
    private searchingString;
    private files_metadataHTML;
    private currentFolder;
    private lastFolders;
    private currentPath;
    private currentFiles;
    private currentFilesPaths;
    private selectedFilesPaths;
    private copyState;
    private cutState;
    private openFolders;
    private settingsPanel;
    private mainPanel;
    private toolsPane;
    private addressPane;
    private options;
    private lastFile;
    private settingsColorInput;
    private settingsInterfaceSelect;
    private filesTilesElement;
    private filesDisplayMode;
    private toolsState;
    private toolsElements;
    private displayModesElements;
    private arrowsState;
    private arrowsElements;
    private currentPathElem;
    private uploadFilesPanel;
    private loaderElem;
    private iconsPaths;
    private currentDragPath;
    private currentStartDragElement;
    private currentDragingElement;
    constructor(root: Element | null, FileManagerServer: FileManagerServer, options: options, customStyles?: IfileManagerStyles | null, customLanguages?: IfileManagerStyles | null);
    private createHTMLFileList;
    private createHTMLFileTiles;
    private createHTMLNavFolder;
    private openCloseFolder;
    handleOpenNavFolder(event: Event): Promise<void>;
    private focusNavFolder;
    handleShowFileList(event: Event): void;
    private updateListDisplayIcon;
    private updateTilesDisplayIcon;
    handleListDisplayModeClick(event: Event): void;
    handleTilesDisplayModeClick(event: Event): void;
    private updateBackArrow;
    private updateUpArrow;
    private updateCurrentPath;
    handleNavigationPathClick(event: Event): Promise<void>;
    handleBackArrowClick(event: Event): void;
    handleUpArrowClick(event: Event): void;
    handleRefreshClick(event: Event): Promise<void>;
    handleUploadClick(event: Event): void;
    handleSubmitSettings(event: Event): void;
    handleResetSettings(event: Event): void;
    handleSearchChange(event: Event): Promise<void>;
    private updateFileList;
    private resetSearching;
    handleUploadingFile(event: Event): Promise<void>;
    private openPreviousFolders;
    private searchOpenFoldersStart;
    private searchOpenFoldersRecursion;
    private updateNavFolders;
    handleUploadingFolder(event: Event): Promise<void>;
    handleOpenFileListFolder(event: Event): Promise<void>;
    private updateRemove;
    private updateDownload;
    private updateCreateFolderAndFiles;
    private updateRename;
    private updateCopy;
    private updateCut;
    private updateInsert;
    private clearCurrentFiles;
    handleFilemanagerClick(event: Event): void;
    handleRemoveClick(event: Event): Promise<void>;
    handleDownloadClick(event: Event): Promise<void>;
    handleRenameClick(event: Event): Promise<void>;
    handleCopyClick(event: Event): void;
    handleCutClick(event: Event): void;
    private copyFiles;
    private insertFiles;
    private cutFiles;
    handleInsertClick(event: Event): Promise<void>;
    handleSettingsClick(): void;
    handleKeyDown(event: KeyboardEvent): Promise<void>;
    handleInsert(event: Event): void;
    handleFileClick(event: MouseEvent): void;
    private getInternalFolders;
    private startLoading;
    private endLoading;
    private getInternalFiles;
    private updateSettingsColorInputs;
    private updateSettingsInterfaceSelects;
    handleFilesDragStart(event: Event): void;
    handleFilesDragOver(event: Event): void;
    handleFilesDragLeave(event: Event): void;
    handleFilesDrop(event: Event): Promise<void>;
    handleCreateFileClick(event: Event): Promise<void>;
    handleCreateFolderClick(event: Event): Promise<void>;
    updateInterface(): Promise<void>;
    private initInterface;
}
declare const FileManagerLibrary: {
    FileManager: typeof FileManager;
    FileManagerServer: typeof FileManagerServer;
};
export default FileManagerLibrary;
